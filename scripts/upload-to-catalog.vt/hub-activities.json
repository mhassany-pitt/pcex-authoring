[
    {
        "id": "6780003d07784185798147eb",
        "name": "objects_classes_account_llm",
        "items": [
            {
                "item": "664e3c2a91363872f0ba354b",
                "type": "example",
                "details": {
                    "name": "The Class for Representing a Bank Account (Case 1)",
                    "description": "Construct a class that represents a basic bank account. This class should contain data representing the name of the account’s owner, the account number, and the account’s current balance; all of which could be accessed or changed only through the getter and setter methods. An instance of the class should be created by specifying three parameters that are used to initialize the instance (i.e., object) data. The other methods of this class should perform various services on the account (making deposits, withdrawals, adding interest to the account). These methods should examine the data passed into them to make sure the requested transaction is valid."
                }
            },
            {
                "item": "677ffd4f07784185798147e0",
                "type": "challenge",
                "details": {
                    "name": "The Class for Representing a Bank Account (Case 2).",
                    "description": "Construct a class that represents a basic bank account. This class should contain data representing the name of the account’s owner, the account number, and the account’s current balance; all of which could be accessed or changed only through the getter and setter methods. An instance of the class should be created by specifying three parameters that are used to initialize the instance (i.e., object) data. The other methods of this class should:\\n - provide a one-line description of the account, and\\n - perform various services on the account (making deposits, withdrawals, adding interest to the account). These methods should examine the data passed into them to make sure the requested transaction is valid."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "677ffd2207784185798147ce",
        "name": "objects_classes_point_llm",
        "items": [
            {
                "item": "664e2d5591363872f0ba3479",
                "type": "example",
                "details": {
                    "name": "The Class for Representing a Point in the Euclidean Plane (Case 1)",
                    "description": "Construct a class that represents a point in the Euclidean plane. The class should contain data that represents the point’s integer coordinates (x,y). The point's coordinates could be accessed or changed only through the getter and setter methods. The class should also include a method to translate the point, i.e., shift the point's location by the specified amount."
                }
            },
            {
                "item": "677ffce207784185798147c4",
                "type": "challenge",
                "details": {
                    "name": "The Class for Representing a Point in the Euclidean Plane (Case 2).",
                    "description": "Construct a class that represents a point in the Euclidean plane. The class should contain data that represents the point’s integer coordinates (x,y). The point's coordinates could be accessed or changed only through the getter and setter methods. The class should also include a method to calculate and return the point's distance from the origin (0,0)."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "677ffcb007784185798147b2",
        "name": "py_char_dict_llm",
        "items": [
            {
                "item": "664e500191363872f0ba38c4",
                "type": "example",
                "details": {
                    "name": "Creating a Dictionary of Character-Count Pairs",
                    "description": "Construct a program that has a function which receives a string from the user and creates a dictionary that maps each character in the given string to its frequency, that is, how many times that character appears in the given string.\\nFor example, if the given string is \"book\", the program creates the following dictionary:\\nb : 1\\no : 2\\nk : 1"
                }
            },
            {
                "item": "677ffc7d07784185798147a8",
                "type": "challenge",
                "details": {
                    "name": "Creating a Dictionary of Character-Words Pairs.",
                    "description": "Construct a program that has a function which receives a string and creates a dictionary that maps each character to the list of distinct words in the given string that start with that character. The dictionary should be case insensitive.\\nFor example, if the given string is \"This is my test score\", the program creates the following dictionary:\\nt : ['this', 'test']\\ni : ['is']\\nm : ['my']\\ns : ['score']"
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "677ffc3e077841857981479c",
        "name": "py_list_rotate_llm",
        "items": [
            {
                "item": "664e2d6691363872f0ba3491",
                "type": "example",
                "details": {
                    "name": "Rotating the List Values to the Left by One Position",
                    "description": "Construct a program that has a function that receives a list of values and returns the list rotated to the left by 1 position so that the value at the front of the list goes to the back and the order of the other values stays the same. For example, if the list is [1, 2, 3, 4, 5, 6], the program will change it to [2, 3, 4, 5, 6, 1]."
                }
            },
            {
                "item": "664e2d6891363872f0ba3493",
                "type": "challenge",
                "details": {
                    "name": "Rotating the List Values to the Left by Two Position",
                    "description": "Construct a program that has a function that receives a list of values and returns the list rotated to the left by 2 position so that the value at the front of the list goes to the second last position, the second value of the list goes to the back, and the order of the other values stays the same. For example, if the list is [1, 2, 3, 4, 5, 6], the program will change it to [3, 4, 5, 6, 1, 2]."
                }
            },
            {
                "item": "677ffb950778418579814784",
                "type": "challenge",
                "details": {
                    "name": "Rotating the List Values to the Right by One Position.",
                    "description": "Construct a program that has a function that receives a list of values and returns the list rotated to the right by one position so that the value that is currently at the end of the list is moved to the front, shifting the remaining values to the right. For example, if the list is [1, 2, 3, 4, 5, 6], the program will change it to [6, 1, 2, 3, 4, 5]."
                }
            },
            {
                "item": "677ffc000778418579814792",
                "type": "challenge",
                "details": {
                    "name": "Rotating the List Values to the Right by Two Position.",
                    "description": "Construct a program that has a function that receives a list of values and returns the list rotated to the right by 2 position so that the value that is currently at the end of the list is moved to the second position, the second last value of the list is moved to the front of the list, and the remaining values are shifted to the right. For example, if the list is [1, 2, 3, 4, 5, 6], the program will change it to [5, 6, 1, 2, 3, 4]."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "677ffb560778418579814774",
        "name": "py_list_min_max_llm",
        "items": [
            {
                "item": "664e504491363872f0ba38ec",
                "type": "example",
                "details": {
                    "name": "Finding the Maximum Value in a List",
                    "description": "Write a program that finds the maximum value in a list."
                }
            },
            {
                "item": "677ffb120778418579814769",
                "type": "challenge",
                "details": {
                    "name": "Finding the Minimum Value in a List.",
                    "description": "Write a program that finds the minimum value in a list."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "677ffaa10778418579814757",
        "name": "py_list_basic_llm",
        "items": [
            {
                "item": "664e2d5d91363872f0ba3481",
                "type": "example",
                "details": {
                    "name": "Updating an Element in the List (Case 1) ",
                    "description": "Construct a program that initializes a list with three values, changes the first element in the list, and finally, prints the list."
                }
            },
            {
                "item": "677ffa5b0778418579814746",
                "type": "challenge",
                "details": {
                    "name": "Updating an Element in the List (Case 2).",
                    "description": "Construct a program that initializes a list with five floating-point numbers, changes the second element in the list, and finally, prints the list."
                }
            },
            {
                "item": "677ffa7e077841857981474e",
                "type": "challenge",
                "details": {
                    "name": "Updating an Element in the List (Case 3).",
                    "description": "Construct a program that initializes a list with four string values, changes the last element in the list, and finally, prints the list."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "677c888e4ef8609babb3050b",
        "name": "py_search_list_llm",
        "items": [
            {
                "item": "664e25c591363872f0ba3374",
                "type": "example",
                "details": {
                    "name": "Printing Common Elements in Two Lists",
                    "description": "Construct a program that has a function that receives two lists and prints the values in the 2nd list that exist in the 1st list."
                }
            },
            {
                "item": "664e25c791363872f0ba3376",
                "type": "challenge",
                "details": {
                    "name": "Printing the Total Number of Times Elements of One List Appear in Another List",
                    "description": "Construct a program that has a function that receives two lists and prints the total number of times the elements in the 2nd list appear in the 1st list. For example, if the 1st list is [1, 2, 3, 3, 4, 4, 5, 6] and the 2nd list is [3, 4, 5, 6, 7], then the total number of times that the elements in the 2nd list appear in the 1st list is 6.\\nNote that we need to count matches for all values in the 2nd list (including duplicate values, if any)."
                }
            },
            {
                "item": "677c278690e7c54581d66512",
                "type": "challenge",
                "details": {
                    "name": "Creating a List that Contains the Numbers of Times Each Element of One List Appears in Another List.",
                    "description": "Construct a program that has a function that receives two lists and creates a list that contains the number of times each element in the 2nd list appears in the 1st list. For example, if the 1st list is [1, 2, 3, 3, 4, 4, 5, 6] and the 2nd list is [3, 4, 5, 6, 7], then the list that contains the number of times each element in the 2nd list appears in the 1st list is [2, 2, 1, 1, 0].\\nAssume that all elements in the 2nd list are unique."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "677c885c4ef8609babb304e8",
        "name": "py_list_fill_llm",
        "items": [
            {
                "item": "664e44c291363872f0ba3755",
                "type": "example",
                "details": {
                    "name": "Add Values to an Empty List (Case 1)",
                    "description": "Construct a program that creates a list of first ten positive odd numbers."
                }
            },
            {
                "item": "677c273490e7c54581d664e2",
                "type": "challenge",
                "details": {
                    "name": "Add Values to an Empty List (Case 2).",
                    "description": "Construct a program that creates a list of eight string values received from the user."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "677c883a4ef8609babb304d1",
        "name": "py_str_count_llm",
        "items": [
            {
                "item": "664e423491363872f0ba36a5",
                "type": "example",
                "details": {
                    "name": "Counting the Occurrences of One String in Another (Case 1)",
                    "description": "Construct a program that has a function that receives a string and returns the number of times that the string \"hi\" appears anywhere in the given string, ignoring the case."
                }
            },
            {
                "item": "677c51d4949ed2ff17c303fa",
                "type": "challenge",
                "details": {
                    "name": "Counting the Occurrences of One String in Another (Case 2).",
                    "description": "Construct a program that has a function that receives a string and returns the number of times that the string \"hi?t\" appears anywhere in the given string where '?' could be any letter. For example, \"hint\" and \"hilt\" would count as a match.\\nAll string comparisons should be case-insensitive."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "677c88264ef8609babb304c5",
        "name": "py_concat_char_two_str_llm",
        "items": [
            {
                "item": "664e25d391363872f0ba337f",
                "type": "example",
                "details": {
                    "name": "Concatenating Characters of Two Strings (Case 1)",
                    "description": "Construct a program that has a function that receives two strings and returns a string formed from the given strings such that the first character of each string is omitted.\\nFor example, the new string that will be formed from the strings 'abc' and 'xyz' is 'bcyz'.\\nAssume that both strings have at least one character."
                }
            },
            {
                "item": "677c5199949ed2ff17c303f0",
                "type": "challenge",
                "details": {
                    "name": "Concatenating Characters of Two Strings (Case 2).",
                    "description": "Construct a program that has a function that receives two strings and returns a string formed from the given strings separated by a space character such that the first two characters of the given strings are swapped.\\nFor example, the new string that will be formed from the strings 'abc' and 'xyz' is 'xyc abz'.\\nAssume that both strings have at least two characters."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "677c88174ef8609babb304b9",
        "name": "py_nestedloops_print_a_square_star_pattern_llm",
        "items": [
            {
                "item": "664e4dbb91363872f0ba3845",
                "type": "example",
                "details": {
                    "name": "Printing a square star pattern",
                    "description": "Construct a program that takes an input as the size of a solid square  and print the square.\\nFor example, if a user’s input is 4, the printed solid square should look like:\\n****\\n****\\n****\\n****"
                }
            },
            {
                "item": "677c271690e7c54581d664d3",
                "type": "challenge",
                "details": {
                    "name": "Printing the outline of a square star pattern.",
                    "description": "Construct a program that takes an input as the size of a square and print the outline of the square.\\nFor example, if a user’s input is 4, the printed square should look like:\\n****\\n*  *\\n*  *\\n****"
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "677c88074ef8609babb304ad",
        "name": "py_repeated_sequence_llm",
        "items": [
            {
                "item": "664e2c5391363872f0ba3442",
                "type": "example",
                "details": {
                    "name": "Printing A Sequence of Repeated Numbers (Case 1) ",
                    "description": "Construct a program that receives an integer N from the user and prints a sequence of space-separated numbers from 1 to N such that each number in the sequence is repeated 5 times."
                }
            },
            {
                "item": "677c270490e7c54581d664c7",
                "type": "challenge",
                "details": {
                    "name": "Printing A Sequence of Repeated Numbers (Case 2).",
                    "description": "Construct a program that receives an integer N from the user and prints a sequence of space-separated numbers from 1 to N such that the N-th number in the sequence is repeated N times."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "677c87f24ef8609babb304a0",
        "name": "py_range_three_llm",
        "items": [
            {
                "item": "664e2eeb91363872f0ba34f2",
                "type": "example",
                "details": {
                    "name": "Printing Sequence of Numbers with a Gap Between Adjacent Values (Case 1) ",
                    "description": "Construct a program that prints a sequence of numbers from 1 (inclusive) to 16 (exclusive) in increments of 4."
                }
            },
            {
                "item": "677c26e390e7c54581d664b3",
                "type": "challenge",
                "details": {
                    "name": "Printing Sequence of Numbers with a Gap Between Adjacent Values (Case 2).",
                    "description": "Construct a program that prints a sequence of numbers from 7 (inclusive) to 35 (inclusive) in increments of 7."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "677c87d54ef8609babb30494",
        "name": "py_range_one_llm",
        "items": [
            {
                "item": "664e427291363872f0ba36c8",
                "type": "example",
                "details": {
                    "name": "Printing Consecutive Numbers Starting from Zero (Case 1) ",
                    "description": "Construct a program that prints a sequence of numbers from 0 (inclusive) to 10 (exclusive)."
                }
            },
            {
                "item": "677c26c890e7c54581d664a5",
                "type": "challenge",
                "details": {
                    "name": "Printing Consecutive Numbers Starting from Zero (Case 2).",
                    "description": "Construct a program that prints a sequence of numbers from 0 (inclusive) to 6 (exclusive)."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "677c87be4ef8609babb30489",
        "name": "py_find_average_llm",
        "items": [
            {
                "item": "664e3ca791363872f0ba3590",
                "type": "example",
                "details": {
                    "name": "Calculating the Average of Input Integers",
                    "description": "Construct a program that reads a series of integers from the user, sums them up, and calculates their average. The user enters 0 to indicate the end of the input."
                }
            },
            {
                "item": "664e3ca991363872f0ba3592",
                "type": "challenge",
                "details": {
                    "name": "Calculating the Average of the Input Integers that are an Even Number",
                    "description": "Construct a program that reads a series of integer values from the user, sums up the integers that are an even number, and calculate their average. The user enters 0 to indicate the end of the input."
                }
            },
            {
                "item": "677c26a890e7c54581d66490",
                "type": "challenge",
                "details": {
                    "name": "Calculating the Average of Floating-Point Numbers.",
                    "description": "Construct a program that reads a series of non-negative floating-point numbers from the user, sums them up, and calculate their average.\\nNote that you need to think what value should the program use to indicate the end of the input."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "677c87ab4ef8609babb3047d",
        "name": "py_check_adjacent_llm",
        "items": [
            {
                "item": "664e44cd91363872f0ba3762",
                "type": "example",
                "details": {
                    "name": "Finding Adjacent Duplicates in a Sequence of Numbers",
                    "description": "Construct a program that checks whether a sequence of numbers, entered one at a time, contains adjacent duplicates. The user enters -1 to indicate the end of the input.\\nFor example, 4 is a duplicate in the sequence of numbers 1, 3, 4, 4, -1."
                }
            },
            {
                "item": "677c267e90e7c54581d66472",
                "type": "challenge",
                "details": {
                    "name": "Finding Adjacent Consecutive Numbers in a Sequence of Integers.",
                    "description": "Construct a program that checks whether a sequence of integers, entered one at a time, contains adjacent integers that are consecutive. The user enters -1 to indicate the end of the input.\\nNote that integers which follow each other in order, without gaps, from smallest to largest are consecutive numbers. For example, 12, 13, 14 and 15 are consecutive numbers."
                }
            },
            {
                "item": "677c268590e7c54581d66478",
                "type": "challenge",
                "details": {
                    "name": "Finding Adjacent Numbers in Ascending Order in a Sequence of Numbers.",
                    "description": "Construct a program that checks whether a sequence of non-zero numbers, entered one at a time, contains adjacent numbers in ascending order. Numbers are said to be in ascending order when they are arranged from the smallest to the largest number. For example, 5, 9, 13, 17 and 21 are arranged in ascending order.\\nNote that you need to think what value should the program use to indicate the end of the input."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "677c87904ef8609babb30471",
        "name": "py_input_llm",
        "items": [
            {
                "item": "664e43e491363872f0ba3717",
                "type": "example",
                "details": {
                    "name": "Receiving Input Integers Until a Certain Condition is Met (Case 1)",
                    "description": "Construct a program that receives an integer from the user, outputs that integer, and stops receiving integers when the user enters a negative integer."
                }
            },
            {
                "item": "677c264e90e7c54581d66456",
                "type": "challenge",
                "details": {
                    "name": "Receiving Input Integers Until a Certain Condition is Met (Case 2).",
                    "description": "Construct a program that receives an integer from the user, outputs that integer, and stops receiving integers when the user enters an integer that is not in the range of 30 to 90 both inclusive."
                }
            },
            {
                "item": "677c265d90e7c54581d6645e",
                "type": "challenge",
                "details": {
                    "name": "Receiving Input Integers Until a Certain Condition is Met (Case 3).",
                    "description": "Construct a program that receives an integer from the user, outputs that integer, and stops receiving integers when the user enters a negative integer or an integer greater than 1000."
                }
            },
            {
                "item": "677c266690e7c54581d66464",
                "type": "challenge",
                "details": {
                    "name": "Receiving Input Integers Until a Certain Condition is Met (Case 4).",
                    "description": "Construct a program that receives an integer from the user, outputs that integer, and stops receiving integers when the user enters an even integer less than 10."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "677c877c4ef8609babb30465",
        "name": "py_nested_if_temperature_llm",
        "items": [
            {
                "item": "664e447191363872f0ba3732",
                "type": "example",
                "details": {
                    "name": "Warning the User about the Changes in the Temperature",
                    "description": "Construct a program that receives the temperature for today and yesterday and warns the user when it is getting colder or warmer or neither. The temperature values could have a decimal point."
                }
            },
            {
                "item": "677c262b90e7c54581d66445",
                "type": "challenge",
                "details": {
                    "name": "Warning the User about the Changes in the Temperature and Humidity.",
                    "description": "Construct a program that receives the temperature and humidity for today and yesterday and warns the user when it is getting colder or warmer or neither. When it is getting warmer, the program should also warn the user about the changes in humidity. In particular, it should warn the user when today's humidity is more, less, or has not changed compared to yesterday's humidity. Note that the temperature and humidity values could have a decimal point."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "677c876c4ef8609babb30459",
        "name": "py_if_else_wage_llm",
        "items": [
            {
                "item": "664e50cc91363872f0ba3909",
                "type": "example",
                "details": {
                    "name": "Calculating the Employee's Wage Based on the Hours That the Employee Has Worked and an Hourly Pay Rate",
                    "description": "Construct a program for the payment department of a company to calculate the wage of an employee based on the number of hours that the employee has worked. If an employee works over 40 hours in a week, the payment amount should take into account the overtime hours. The overtime hours are paid at a rate one and a half times the regular pay rate."
                }
            },
            {
                "item": "677c261090e7c54581d66434",
                "type": "challenge",
                "details": {
                    "name": "Calculating the Wage of an Employee at the Customer Service Call Center.",
                    "description": "Construct a program for the payment department of a company to calculate the wage of an employee who works at the customer service call center. Like other employees in the company, the employees at the customer service call center are paid based on the hours that they work. If they work over 40 hours in a week, the payment amount should take into account the overtime hours. The overtime hours are paid at a rate one and a half times the regular pay rate.\\nThe company's policy is to pay more to those employees at the customer service call center who work during weekends. Therefore, the minimum extra pay that the employees could receive for each day of work during weekends is $30. The extra pay increases to the maximum of $50 for the employees who have at least 5 days of work during weekends."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "677c87534ef8609babb3044d",
        "name": "py_three_booleans_llm",
        "items": [
            {
                "item": "664e2fe691363872f0ba3532",
                "type": "example",
                "details": {
                    "name": "Determining When at Least One of the Three Boolean Variables is True",
                    "description": "Construct a program that determines whether at least one of the three boolean variables is True based on the inputs that it receives from the user."
                }
            },
            {
                "item": "677c25c890e7c54581d6641b",
                "type": "challenge",
                "details": {
                    "name": "Determining When at Least One of the Three Boolean Variables is False.",
                    "description": "Construct a program that determines whether at least one of the three boolean variables is False based on the inputs that it receives from the user."
                }
            },
            {
                "item": "677c25d690e7c54581d66423",
                "type": "challenge",
                "details": {
                    "name": "Determining When All Three Boolean Variables Are Equal.",
                    "description": "Construct a program that receives the value of three boolean variables from the user and determines whether all variables have the same value, either all three True or all three False."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "677c87394ef8609babb30441",
        "name": "py_rent_car_llm",
        "items": [
            {
                "item": "664e422e91363872f0ba369a",
                "type": "example",
                "details": {
                    "name": "Determining When a Customer Could Rent a Car (Case 1)",
                    "description": "Construct a program that determines whether a customer could rent a car based on the inputs that it receives from the car rental agent. Rental cars are available to licensed drivers of 21 years of age or over."
                }
            },
            {
                "item": "677c257d90e7c54581d663ef",
                "type": "challenge",
                "details": {
                    "name": "Determining When a Customer Could Rent a Car (Case 2).",
                    "description": "Construct a program that determines whether a customer could rent a car based on the inputs that it receives from the car rental agent. Rental cars are available to licensed drivers of 21 years of age or over who have not had a car accident."
                }
            },
            {
                "item": "677c258d90e7c54581d663f7",
                "type": "challenge",
                "details": {
                    "name": "Determining When a Customer Could Rent a Car (Case 3).",
                    "description": "Construct a program that determines whether a customer could rent a car based on the inputs that it receives from the car rental agent. Rental cars are available to licensed drivers who are either at least 21 years old or have a credit card with $10,000 or more of credit."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "677c87294ef8609babb30435",
        "name": "py_phone_age_llm",
        "items": [
            {
                "item": "664e4e3a91363872f0ba3881",
                "type": "example",
                "details": {
                    "name": "Determining When to Buy a New Phone (Case 1)",
                    "description": "Construct a program that determines whether it is time to buy a new phone based on the inputs that it receives from the user. A new phone should be bought if the phone breaks or the phone is at least 3 years old."
                }
            },
            {
                "item": "677c254c90e7c54581d663d5",
                "type": "challenge",
                "details": {
                    "name": "Determining When to Buy a New Phone (Case 2).",
                    "description": "Construct a program that determines whether it is time to buy a new phone based on the inputs that it receives from the user. A new phone should be bought in either of the following cases:\\nthe phone breaks\\nthe screen has a problem\\nthe phone has the random shutdown problem"
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "677c871a4ef8609babb30429",
        "name": "py_references_passing_values_llm",
        "items": [
            {
                "item": "664e2c8091363872f0ba3457",
                "type": "example",
                "details": {
                    "name": "Passing Values",
                    "description": "Construct a function that increases the original integer's value by 1 and return the increased value's memory address."
                }
            },
            {
                "item": "677c4de0949ed2ff17c30382",
                "type": "challenge",
                "details": {
                    "name": "Passing Values.",
                    "description": "Construct a program that convert Celsius to Fahrenheit."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "677c870a4ef8609babb3041d",
        "name": "py_datatype_input_manipulation_llm",
        "items": [
            {
                "item": "664e3c8e91363872f0ba3572",
                "type": "example",
                "details": {
                    "name": "Input Manipulation",
                    "description": "Construct a program that takes a user's inputs and multiplies the inputs.Then print the type of the result, convert the result to float and print its float absolute value. "
                }
            },
            {
                "item": "677c4d88949ed2ff17c30373",
                "type": "challenge",
                "details": {
                    "name": "Input Manipulation.",
                    "description": "Construct a program that takes a user's inputs and calculate the division of the inputs.Then convert the division result into an integer, check the current division result's type and print the original division result, converted result and the original division result's float absolute value."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "677c86f14ef8609babb30411",
        "name": "py_bmi_calculator_llm",
        "items": [
            {
                "item": "664e448691363872f0ba3745",
                "type": "example",
                "details": {
                    "name": "Calculating Body Mass Index (BMI)",
                    "description": "BMI is a measure of body fat based on height and weight that applies to adult men and women. BMI Categories are as follows:\\nUnderweight = <18.5\\nNormal weight = 18.5–24.9\\nOverweight = 25–29.9\\nObesity = BMI of 30 or greater.\\nEnglish BMI Formula (Imperial) is: BMI = (Weight in Pounds / (Height in inches x Height in inches)) x 703.\\nConstruct a program that calculates the Body Mass Index (BMI) according to this formula."
                }
            },
            {
                "item": "677c251a90e7c54581d663bb",
                "type": "challenge",
                "details": {
                    "name": "Calculating and Rounding Up Body Mass Index (BMI) To the Nearest Integer.",
                    "description": "BMI is a measure of body fat based on height and weight that applies to adult men and women. BMI Categories are as follows: \\nUnderweight = <18.5\\nNormal weight = 18.5–24.9\\nOverweight = 25–29.9\\nObesity = BMI of 30 or greater.\\nEnglish BMI Formula (Imperial) is: BMI = (Weight in Pounds / (Height in inches x Height in inches)) x 703.\\n BMI results are usually displayed as integers (values without decimal points). Construct a program to round the BMI result to the nearest integer."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "677c5572949ed2ff17c30456",
        "name": "py_time_conversion_llm",
        "items": [
            {
                "item": "664e23ff91363872f0ba32ee",
                "type": "example",
                "details": {
                    "name": "Seconds to Minutes Conversion",
                    "description": "Construct a program that obtains minutes and remaining seconds from the input amount of time in seconds. For example, 500 seconds contains 8 minutes and 20 seconds."
                }
            },
            {
                "item": "677c24fa90e7c54581d663aa",
                "type": "challenge",
                "details": {
                    "name": "Converting Milliseconds to Hours, Minutes, and Seconds.",
                    "description": "Construct a program that obtains hours, minutes, and seconds from an amount of time in milliseconds."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e50ed91363872f0ba391d",
        "name": "nested_for.repeated_sequence",
        "items": [
            {
                "item": "664e50e691363872f0ba3919",
                "type": "example",
                "details": {
                    "name": "Printing A Sequence of Repeated Numbers (Case 1) ",
                    "description": "Construct a program that receives an integer N from the user and prints a sequence of space-separated numbers from 1 to N such that each number in the sequence is repeated 5 times. For example, if N is 6, the program will print the following sequence:\\n11111 22222 33333 44444 55555 66666"
                }
            },
            {
                "item": "664e50ea91363872f0ba391b",
                "type": "challenge",
                "details": {
                    "name": "Printing A Sequence of Repeated Numbers (Case 2) ",
                    "description": "Construct a program that receives an integer N from the user and prints a sequence of space-separated numbers from 1 to N such that the N-th number in the sequence is repeated N times. For example, if N is 6, the program will print the following sequence:\\n1 22 333 4444 55555 666666"
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e50e091363872f0ba3915",
        "name": "csedpad.05.LogicalOperators.no_topic_1",
        "items": [
            {
                "item": "664e50d391363872f0ba3911",
                "type": "example",
                "details": {
                    "name": "csedpad.05.LogicalOperators.no_topic_1",
                    "description": "Given the price of item this program says if item is qualified for discount or not. An item is qualified for discount if the price of item is greater than 200 but less than 500."
                }
            },
            {
                "item": "664e50d991363872f0ba3913",
                "type": "example",
                "details": {
                    "name": "csedpad.05.LogicalOperators.no_topic_1",
                    "description": "Given the age of 3 individuals, this program compares their ages in order to check whether any two individuals are of the same age."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e50d091363872f0ba390d",
        "name": "py_if_else_wage",
        "items": [
            {
                "item": "664e50cc91363872f0ba3909",
                "type": "example",
                "details": {
                    "name": "Calculating the Employee's Wage Based on the Hours That the Employee Has Worked and an Hourly Pay Rate",
                    "description": "Construct a program for the payment department of a company to calculate the wage of an employee based on the number of hours that the employee has worked. If an employee works over 40 hours in a week, the payment amount should take into account the overtime hours. The overtime hours are paid at a rate one and a half times the regular pay rate."
                }
            },
            {
                "item": "664e50ce91363872f0ba390b",
                "type": "challenge",
                "details": {
                    "name": "Calculating the Wage of an Employee at the Customer Service Call Center",
                    "description": "Construct a program for the payment department of a company to calculate the wage of an employee who works at the customer service call center. Like other employees in the company, the employees at the customer service call center are paid based on the hours that they work. If they work over 40 hours in a week, the payment amount should take into account the overtime hours. The overtime hours are paid at a rate one and a half times the regular pay rate.\\nThe company's policy is to pay more to those employees at the customer service call center who work during weekends. Therefore, the minimum extra pay that the employees could receive for each day of work during weekends is $30. The extra pay increases to the maximum of $50 for the employees who have at least 5 days of work during weekends."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e50a991363872f0ba3905",
        "name": "arrays.j_array_min_max",
        "items": [
            {
                "item": "664e506091363872f0ba3901",
                "type": "example",
                "details": {
                    "name": "Finding the Maximum Value in an Array",
                    "description": "Write a program that finds the maximum value in an array."
                }
            },
            {
                "item": "664e508691363872f0ba3903",
                "type": "challenge",
                "details": {
                    "name": "Finding the Minimum Value in an Array",
                    "description": "Write a program that finds the minimum value in an array."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e505d91363872f0ba38fe",
        "name": "csedpad.02.Input.example3.inputtype",
        "items": [
            {
                "item": "664e505a91363872f0ba38fc",
                "type": "example",
                "details": {
                    "name": "csedpad.02.Input.example3.inputtype",
                    "description": "This program collects various information about an employee from the standard input device. The collected employee information is then displayed on the screen."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e505691363872f0ba38f8",
        "name": "arithmetic.time_conversion",
        "items": [
            {
                "item": "664e504b91363872f0ba38f4",
                "type": "example",
                "details": {
                    "name": "Seconds to Minutes Conversion",
                    "description": "Construct a program that obtains minutes and remaining seconds from the input amount of time in seconds. For example, 500 seconds contains 8 minutes and 20 seconds."
                }
            },
            {
                "item": "664e505191363872f0ba38f6",
                "type": "challenge",
                "details": {
                    "name": "Converting Milliseconds to Hours, Minutes, and Seconds",
                    "description": "Construct a program that obtains hours, minutes, and seconds from an amount of time in milliseconds."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e504991363872f0ba38f0",
        "name": "py_list_min_max",
        "items": [
            {
                "item": "664e504491363872f0ba38ec",
                "type": "example",
                "details": {
                    "name": "Finding the Maximum Value in a List",
                    "description": "Write a program that finds the maximum value in a list."
                }
            },
            {
                "item": "664e504691363872f0ba38ee",
                "type": "challenge",
                "details": {
                    "name": "Finding the Minimum Value in a List",
                    "description": "Write a program that finds the minimum value in a list."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e503a91363872f0ba38e7",
        "name": "csedpad.17.ClassesObjects.objects_1",
        "items": [
            {
                "item": "664e502691363872f0ba38e1",
                "type": "example",
                "details": {
                    "name": "csedpad.17.ClassesObjects.objects_1",
                    "description": "This program creates a rectangle object and calculates its area."
                }
            },
            {
                "item": "664e502c91363872f0ba38e3",
                "type": "example",
                "details": {
                    "name": "csedpad.17.ClassesObjects.objects_1",
                    "description": "Create a Student object, stores Student's name and mark inforamtion, and display those information."
                }
            },
            {
                "item": "664e503391363872f0ba38e5",
                "type": "example",
                "details": {
                    "name": "csedpad.17.ClassesObjects.objects_1",
                    "description": "This program checks if the current speed of car is the max speed of car or not."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e502391363872f0ba38dd",
        "name": "py_f_to_c_conversion",
        "items": [
            {
                "item": "664e501e91363872f0ba38d9",
                "type": "example",
                "details": {
                    "name": "Celsius To Fahrenheit Conversion",
                    "description": "Construct a program that computes the Fahrenheit equivalent of an input Celsius value using the formula F = (9/5)C + 32. The input Celsius value is an integer."
                }
            },
            {
                "item": "664e502091363872f0ba38db",
                "type": "challenge",
                "details": {
                    "name": "Fahrenheit to Celsius Conversion",
                    "description": "Construct a program that computes the Celsius equivalent of an input Fahrenheit value using the formula C = (F - 32) (5/9). The input Fahrenheit value is an integer."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e501991363872f0ba38d6",
        "name": "csedpad.05.LogicalOperators.no_topic",
        "items": [
            {
                "item": "664e501391363872f0ba38d4",
                "type": "example",
                "details": {
                    "name": "csedpad.05.LogicalOperators.no_topic",
                    "description": "This program checks the eligibility of a student to enroll in a university by checking the prerequisite"
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e500f91363872f0ba38d0",
        "name": "py_queue_queue",
        "items": [
            {
                "item": "664e500a91363872f0ba38cc",
                "type": "example",
                "details": {
                    "name": "Queue Implementation",
                    "description": "Implementing Queue. Using Class to construct a Queue structure."
                }
            },
            {
                "item": "664e500c91363872f0ba38ce",
                "type": "challenge",
                "details": {
                    "name": "Solving Josephus Problem",
                    "description": "Construct a program by using Queue structure to solve a Josephus problem. Josephus problem is a counting-out game. N people are in a circle, labeled as 1, 2, 3, … ,n. Given a skip number k, counting from the person labeled as 1, in every round, after k number of people are skipped, the next person will be counted out of the circle. Repeat the process with the remaining people until only one person remains. Then free the last one person. The program should return the last freed  person."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e500891363872f0ba38c8",
        "name": "py_char_dict",
        "items": [
            {
                "item": "664e500191363872f0ba38c4",
                "type": "example",
                "details": {
                    "name": "Creating a Dictionary of Character-Count Pairs",
                    "description": "Construct a program that has a function which receives a string from the user and creates a dictionary that maps each character in the given string to its frequency, that is, how many times that character appears in the given string.\\nFor example, if the given string is \"book\", the program creates the following dictionary:\\nb : 1\\no : 2\\nk : 1"
                }
            },
            {
                "item": "664e500691363872f0ba38c6",
                "type": "challenge",
                "details": {
                    "name": "Creating a Dictionary of Character-Words Pairs",
                    "description": "Construct a program that has a function which receives a string and creates a dictionary that maps each character to the list of distinct words in the given string that start with that character. The dictionary should be case insensitive.\\nFor example, if the given string is \"This is my test score\", the program creates the following dictionary:\\nt : ['this', 'test']\\ni : ['is']\\nm : ['my']\\ns : ['score']"
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e4ff191363872f0ba38c0",
        "name": "for_loops.j_for_two",
        "items": [
            {
                "item": "664e4fd291363872f0ba38bc",
                "type": "example",
                "details": {
                    "name": "Printing Consecutive Numbers Within a Specified Range (Case 1) ",
                    "description": "Construct a program that prints a sequence of numbers from 1 (inclusive) to 9 (inclusive)."
                }
            },
            {
                "item": "664e4fe291363872f0ba38be",
                "type": "challenge",
                "details": {
                    "name": "Printing Consecutive Numbers Within a Specified Range (Case 2) ",
                    "description": "Construct a program that prints a sequence of numbers from 8 (inclusive) to 14 (inclusive)."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e4f8e91363872f0ba38b7",
        "name": "arrays2d.j_soda_survery",
        "items": [
            {
                "item": "664e4f1291363872f0ba38b1",
                "type": "example",
                "details": {
                    "name": "Determining the Maximum Rating for Each Soda in The Survey",
                    "description": "Suppose a soda manufacturer held a taste test for four new flavors to determine if people liked them. The manufacturer got 10 people to try each new flavor and give it a score from 1 to 5, where 1 equals poor and 5 equals excellent. The results of that survey is stored in a matrix. Each row of the matrix holds the responses that all testers gave for one particular soda flavor, and each column holds the responses of one person for all sodas.\\nConstruct a program that determines the maximum rating that each of the four new flavors of soda received."
                }
            },
            {
                "item": "664e4f3e91363872f0ba38b3",
                "type": "challenge",
                "details": {
                    "name": "Determining the Average Rating for Each Soda in The Survey",
                    "description": "Suppose a soda manufacturer held a taste test for four new flavors to determine if people liked them. The manufacturer got 10 people to try each new flavor and give it a score from 1 to 5, where 1 equals poor and 5 equals excellent. The results of that survey is stored in a matrix. Each row of the matrix holds the responses that all testers gave for one particular soda flavor, and each column holds the responses of one person for all sodas.\\nConstruct a program that determines the average ratings that respondents provided to four new flavors of soda."
                }
            },
            {
                "item": "664e4f8291363872f0ba38b5",
                "type": "challenge",
                "details": {
                    "name": "Determining the Average Ratings of each Respondent and Average Ratings Given to Each Soda in the Survey",
                    "description": "Suppose a soda manufacturer held a taste test for four new flavors to determine if people liked them. The manufacturer got 10 people to try each new flavor and give it a score from 1 to 5, where 1 equals poor and 5 equals excellent. The results of that survey is stored in a matrix. Each row of the matrix holds the responses that all testers gave for one particular soda flavor, and each column holds the responses of one person for all sodas.\\nConstruct a program that determines the average ratings that respondents provided to four new flavors of soda as well as the average ratings of each respondent."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e4f1091363872f0ba38ae",
        "name": "csedpad.17.ClassesObjects.ClassExample2.classesandobjects",
        "items": [
            {
                "item": "664e4f0f91363872f0ba38ac",
                "type": "example",
                "details": {
                    "name": "csedpad.17.ClassesObjects.ClassExample2.classesandobjects",
                    "description": "This program calls a static and instance method from Groceries and prints out what is needed for getting groceries in different ways"
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e4f0b91363872f0ba38a6",
        "name": "booleans.hot_dry",
        "items": [
            {
                "item": "664e4eff91363872f0ba389e",
                "type": "example",
                "details": {
                    "name": "Determining the Weather Condition (Case 1)",
                    "description": "Construct a program that determines whether it is both too hot and too dry based on the inputs that it receives from the user."
                }
            },
            {
                "item": "664e4f0291363872f0ba38a0",
                "type": "challenge",
                "details": {
                    "name": "Determining the Weather Condition (Case 2)",
                    "description": "Construct a program that determines whether it is either too hot or too dry (or both) based on the inputs that it receives from the user."
                }
            },
            {
                "item": "664e4f0591363872f0ba38a2",
                "type": "challenge",
                "details": {
                    "name": "Determining the Weather Condition (Case 3)",
                    "description": "Construct a program that determines whether it is too hot but not too dry based on the inputs that it receives from the user."
                }
            },
            {
                "item": "664e4f0891363872f0ba38a4",
                "type": "challenge",
                "details": {
                    "name": "Determining the Weather Condition (Case 4)",
                    "description": "Construct a program that determines whether it is either too hot or too dry but not both based on the inputs that it receives from the user."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e4efc91363872f0ba389b",
        "name": "csedpad.02.Input.example4.inputtype",
        "items": [
            {
                "item": "664e4efa91363872f0ba3899",
                "type": "example",
                "details": {
                    "name": "csedpad.02.Input.example4.inputtype",
                    "description": "This program collects various information about a student from the standard input device. The collected student information is then displayed on the screen."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e4ef591363872f0ba3896",
        "name": "csedpad.preliminary_topics.variables_expressions_constants_1",
        "items": [
            {
                "item": "664e4eee91363872f0ba3894",
                "type": "example",
                "details": {
                    "name": "How tall are you in meters?",
                    "description": "Construct a program that converts the height in feet stored in variable heightInFeet to meters using the constant feet to meter conversion rate 0.30479 and print the height in meters with 3 digits after the decimal point to the console."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e4ea091363872f0ba388f",
        "name": "strings.escape_chars",
        "items": [
            {
                "item": "664e4e4091363872f0ba3889",
                "type": "example",
                "details": {
                    "name": "String With Escape Characters (Case 1)",
                    "description": "Construct a program that prints the following output:\\n\"Quotes\"\\nSlashes\\n\\//\\nHow '\"confounding' \"\\\" it is!"
                }
            },
            {
                "item": "664e4e4e91363872f0ba388b",
                "type": "challenge",
                "details": {
                    "name": "String With Escape Characters (Case 2)",
                    "description": "Construct a program that prints the following output:\\n\"\"Two Double Quotes\"\"\\n        Slashes \\//\\nHow '\"confounding' \"\\\" it is!"
                }
            },
            {
                "item": "664e4e5d91363872f0ba388d",
                "type": "challenge",
                "details": {
                    "name": "String With Escape Characters (Case 3)",
                    "description": "Construct a program that prints the following output:\\n\"Slashes\"\\\\//\\n         \\\\//\\nHow '\"confounding' \"\\\" it is!"
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e4e3e91363872f0ba3885",
        "name": "py_phone_age",
        "items": [
            {
                "item": "664e4e3a91363872f0ba3881",
                "type": "example",
                "details": {
                    "name": "Determining When to Buy a New Phone (Case 1)",
                    "description": "Construct a program that determines whether it is time to buy a new phone based on the inputs that it receives from the user. A new phone should be bought if the phone breaks or the phone is at least 3 years old."
                }
            },
            {
                "item": "664e4e3c91363872f0ba3883",
                "type": "challenge",
                "details": {
                    "name": "Determining When to Buy a New Phone (Case 2)",
                    "description": "Construct a program that determines whether it is time to buy a new phone based on the inputs that it receives from the user. A new phone should be bought in either of the following cases:\\nthe phone breaks\\nthe screen has a problem\\nthe phone has the random shutdown problem"
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e4e3691363872f0ba387b",
        "name": "while_loops.inputs",
        "items": [
            {
                "item": "664e4e2891363872f0ba3873",
                "type": "example",
                "details": {
                    "name": "Receiving Input Integers Until a Certain Condition is Met (Case 1)",
                    "description": "Construct a program that receives an integer from the user, outputs that integer, and stops receiving integers when the user enters a negative integer."
                }
            },
            {
                "item": "664e4e2c91363872f0ba3875",
                "type": "challenge",
                "details": {
                    "name": "Receiving Input Integers Until a Certain Condition is Met (Case 2)",
                    "description": "Construct a program that receives an integer from the user, outputs that integer, and stops receiving integers when the user enters an integer that is not in the range of 30 to 90 both inclusive."
                }
            },
            {
                "item": "664e4e2f91363872f0ba3877",
                "type": "challenge",
                "details": {
                    "name": "Receiving Input Integers Until a Certain Condition is Met (Case 3)",
                    "description": "Construct a program that receives an integer from the user, outputs that integer, and stops receiving integers when the user enters a negative integer or an integer greater than 1000."
                }
            },
            {
                "item": "664e4e3291363872f0ba3879",
                "type": "challenge",
                "details": {
                    "name": "Receiving Input Integers Until a Certain Condition is Met (Case 4)",
                    "description": "Construct a program that receives an integer from the user, outputs that integer, and stops receiving integers when the user enters an even integer less than 10."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e4e2591363872f0ba386f",
        "name": "ifelse.if_else_num",
        "items": [
            {
                "item": "664e4e1d91363872f0ba386b",
                "type": "example",
                "details": {
                    "name": "Determining the Sign of an Integer",
                    "description": "Construct a program that determines whether an integer is positive, negative, or zero."
                }
            },
            {
                "item": "664e4e2191363872f0ba386d",
                "type": "challenge",
                "details": {
                    "name": "Determining Whether an Integer is Even or Odd",
                    "description": "Construct a program that determines whether an integer is even or odd."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e4e0b91363872f0ba3866",
        "name": "arrays2d.j_array2d_basic",
        "items": [
            {
                "item": "664e4de891363872f0ba3860",
                "type": "example",
                "details": {
                    "name": "Updating Two-Dimensional Array (Case 1)",
                    "description": "Construct a program that initializes a 3x4 two-dimensional matrix that has the numbers 1 through 12 for entries, sets the left-most element in the middle row of the matrix to be 20, and finally prints all the elements in the matrix."
                }
            },
            {
                "item": "664e4df591363872f0ba3862",
                "type": "challenge",
                "details": {
                    "name": "Updating Two-Dimensional Array (Case 2)",
                    "description": "Construct a program that initializes a 3x3 two-dimensional matrix that has the numbers 1 through 9 for entries, sets the top-right element of the matrix to be 10, and finally prints all the elements in the matrix."
                }
            },
            {
                "item": "664e4dfe91363872f0ba3864",
                "type": "challenge",
                "details": {
                    "name": "Updating Two-Dimensional Array (Case 3)",
                    "description": "Construct a program that initializes a 2x4 two-dimensional matrix that has multiples of 10 from 10 to 80 for entries, sets the second element of the first row to be 8, and finally prints all the elements in the matrix."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e4ddf91363872f0ba385b",
        "name": "csedpad.15.ArrayLists.arraylist_1",
        "items": [
            {
                "item": "664e4dca91363872f0ba3855",
                "type": "example",
                "details": {
                    "name": "csedpad.15.ArrayLists.arraylist_1",
                    "description": "This program creates a wish list and edits it."
                }
            },
            {
                "item": "664e4dd191363872f0ba3857",
                "type": "example",
                "details": {
                    "name": "csedpad.15.ArrayLists.arraylist_1",
                    "description": "For the online sports store, this program determines if seller adds gifts to the shipping box or not. The seller is a cricket player. He has gift bags containing a cricket ball and gloves for any qualified buyer. If the shipping box has Cricket Bat, then all gift box items are added to the shipping box."
                }
            },
            {
                "item": "664e4dd891363872f0ba3859",
                "type": "example",
                "details": {
                    "name": "csedpad.15.ArrayLists.arraylist_1",
                    "description": "This program shows a person's orginal travel list and creates a new travel list from the original. Then it makes some changes on the new travel list."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e4dc691363872f0ba3851",
        "name": "py_list_change",
        "items": [
            {
                "item": "664e4dc191363872f0ba384d",
                "type": "example",
                "details": {
                    "name": "Modifying a List (Case 1)",
                    "description": "Construct a program that increments all values of the list by 1."
                }
            },
            {
                "item": "664e4dc391363872f0ba384f",
                "type": "challenge",
                "details": {
                    "name": "Modifying a List (Case 2)",
                    "description": "Construct a program that swaps pairs of adjacent elements of the list. For example, if the list is [1, 2, 3, 4, 5, 6], the program will change it to [2, 1, 4, 3, 6, 5].\\nThis program assumes that the list has always an even number of elements."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e4dbf91363872f0ba3849",
        "name": "py_nestedloops_print_a_square_star_pattern",
        "items": [
            {
                "item": "664e4dbb91363872f0ba3845",
                "type": "example",
                "details": {
                    "name": "Printing a square star pattern",
                    "description": "Construct a program that takes an input as the size of a solid square  and print the square.\\nFor example, if a user’s input is 4, the printed solid square should look like:\\n****\\n****\\n****\\n****"
                }
            },
            {
                "item": "664e4dbc91363872f0ba3847",
                "type": "challenge",
                "details": {
                    "name": "Printing the outline of a square star pattern",
                    "description": "Construct a program that takes an input as the size of a square and print the outline of the square.\\nFor example, if a user’s input is 4, the printed square should look like:\\n****\\n*  *\\n*  *\\n****"
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e4db591363872f0ba3841",
        "name": "arithmetic.bmi_calculator",
        "items": [
            {
                "item": "664e4dae91363872f0ba383d",
                "type": "example",
                "details": {
                    "name": "Calculating Body Mass Index (BMI)",
                    "description": "BMI is a measure of body fat based on height and weight that applies to adult men and women. BMI Categories are as follows:\\nUnderweight = <18.5\\nNormal weight = 18.5–24.9\\nOverweight = 25–29.9\\nObesity = BMI of 30 or greater.\\nEnglish BMI Formula (Imperial) is: BMI = (Weight in Pounds / (Height in inches x Height in inches)) x 703.\\nConstruct a program that calculates the Body Mass Index (BMI) according to this formula."
                }
            },
            {
                "item": "664e4db191363872f0ba383f",
                "type": "challenge",
                "details": {
                    "name": "Calculating and Rounding Up Body Mass Index (BMI) To the Nearest Integer",
                    "description": "BMI is a measure of body fat based on height and weight that applies to adult men and women. BMI Categories are as follows: \\nUnderweight = <18.5\\nNormal weight = 18.5–24.9\\nOverweight = 25–29.9\\nObesity = BMI of 30 or greater.\\nEnglish BMI Formula (Imperial) is: BMI = (Weight in Pounds / (Height in inches x Height in inches)) x 703.\\n BMI results are usually displayed as integers (values without decimal points). Construct a program to round the BMI result to the nearest integer."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e4d3291363872f0ba3837",
        "name": "arrays.j_array_rotate",
        "items": [
            {
                "item": "664e4c9c91363872f0ba382f",
                "type": "example",
                "details": {
                    "name": "Rotating the Array Values to the Left by One Position",
                    "description": "Construct a program that has a method that receives an array of values and returns the array rotated to the left by 1 position so that the value at the front of the array goes to the back and the order of the other values stays the same. For example, if the array is {1, 2, 3, 4, 5, 6}, the program will change it to {2, 3, 4, 5, 6, 1}."
                }
            },
            {
                "item": "664e4cab91363872f0ba3831",
                "type": "challenge",
                "details": {
                    "name": "Rotating the Array Values to the Left by Two Position",
                    "description": "Construct a program that has a method that receives an array of values and returns the array rotated to the left by 2 position so that the value at the front of the array goes to the second last position, the second value of the array goes to the back, and the order of the other values stays the same. For example, if the array is {1, 2, 3, 4, 5, 6}, the program will change it to {3, 4, 5, 6, 1, 2}."
                }
            },
            {
                "item": "664e4d1a91363872f0ba3833",
                "type": "challenge",
                "details": {
                    "name": "Rotating the Array Values to the Right by One Position",
                    "description": "Construct a program that has a method that receives an array of values and returns the array rotated to the right by one position so that the value that is currently at the end of the array is moved to the front, shifting the remaining values to the right. For example, if the array is {1, 2, 3, 4, 5, 6}, the program will change it to {6, 1, 2, 3, 4, 5}."
                }
            },
            {
                "item": "664e4d2391363872f0ba3835",
                "type": "challenge",
                "details": {
                    "name": "Rotating the List Values to the Right by Two Position",
                    "description": "Construct a program that has a function that receives a list of values and returns the list rotated to the right by 2 position so that the value that is currently at the end of the list is moved to the second position, the second last value of the list is moved to the front of the list, and the remaining values are shifted to the right. For example, if the list is {1, 2, 3, 4, 5, 6}, the program will change it to {5, 6, 1, 2, 3, 4}."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e4c9791363872f0ba382c",
        "name": "csedpad.01.preliminary_topics.variables_expressions_primitivedatatypes",
        "items": [
            {
                "item": "664e4c9091363872f0ba382a",
                "type": "example",
                "details": {
                    "name": "csedpad.01.preliminary_topics.variables_expressions_primitivedatatypes",
                    "description": "This program displays Casablanca's statistics."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e4c8e91363872f0ba3827",
        "name": "nested_for.star_patterns",
        "items": [
            {
                "item": "664e4c8a91363872f0ba3825",
                "type": "example",
                "details": {
                    "name": "Printing A Right Triangle Star Pattern",
                    "description": "A Right triangle star pattern contains N asterisks in N-th row. Construct a program that receives the number of rows in the right triangle star pattern and prints that triangle. For example, when the number of rows in the right triangle star pattern is 5, the program prints the following output:\\n*\\n**\\n***\\n****\\n*****"
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e4c8991363872f0ba3821",
        "name": "py_stack_stack",
        "items": [
            {
                "item": "664e4c8591363872f0ba381d",
                "type": "example",
                "details": {
                    "name": "Stack",
                    "description": "Implementing Stack. Using Class to construct a Stack structure."
                }
            },
            {
                "item": "664e4c8791363872f0ba381f",
                "type": "challenge",
                "details": {
                    "name": "Stack",
                    "description": " Implementing Stack. Using Class to construct a Stack. Implement a function to determine if all the given brackets are paired.\\nFor example:\\n       paired brackets list:['[','{','(','{','}',')','}',']’] ; unpaired brackets list:['{',']','(','{','}',')','}',']']"
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e4c8091363872f0ba3818",
        "name": "while_loops.j_check_adjacent",
        "items": [
            {
                "item": "664e4c7291363872f0ba3812",
                "type": "example",
                "details": {
                    "name": "Finding Adjacent Duplicates in a Sequence of Numbers",
                    "description": "Construct a program that checks whether a sequence of numbers, entered one at a time, contains adjacent duplicates. The user enters -1 to indicate the end of the input.\\nFor example, 4 is a duplicate in the sequence of numbers 1, 3, 4, 4, -1."
                }
            },
            {
                "item": "664e4c7891363872f0ba3814",
                "type": "challenge",
                "details": {
                    "name": "Finding Adjacent Consecutive Numbers in a Sequence of Integers",
                    "description": "Construct a program that checks whether a sequence of integers, entered one at a time, contains adjacent integers that are consecutive. The user enters -1 to indicate the end of the input.\\nNote that integers which follow each other in order, without gaps, from smallest to largest are consecutive numbers. For example, 12, 13, 14 and 15 are consecutive numbers."
                }
            },
            {
                "item": "664e4c7b91363872f0ba3816",
                "type": "challenge",
                "details": {
                    "name": "Finding Adjacent Numbers in Ascending Order in a Sequence of Numbers",
                    "description": "Construct a program that checks whether a sequence of non-zero numbers, entered one at a time, contains adjacent numbers in ascending order. Numbers are said to be in ascending order when they are arranged from the smallest to the largest number. For example, 5, 9, 13, 17 and 21 are arranged in ascending order.\\nNote that you need to think what value should the program use to indicate the end of the input."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e4c5791363872f0ba380e",
        "name": "py_temperature",
        "items": [
            {
                "item": "664e4c2e91363872f0ba380a",
                "type": "example",
                "details": {
                    "name": "Finding the Number of Days Above the Average Temperature",
                    "description": "Construct a program that reads a series of temperatures and reports the average temperature and the number of the days that are above the average. Assume that the input values could have a decimal point."
                }
            },
            {
                "item": "664e4c3d91363872f0ba380c",
                "type": "challenge",
                "details": {
                    "name": "Displaying the Days That are Above 32 Degrees Fahrenheit",
                    "description": "Construct a program that reads a series of temperatures and reports the days that are above 32 degrees Fahrenheit. Assume that the temperature values are in Fahrenheit. Also assume that input values could have a decimal point."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e4c2d91363872f0ba3805",
        "name": "py_squares",
        "items": [
            {
                "item": "664e4c2791363872f0ba37ff",
                "type": "example",
                "details": {
                    "name": "Printing the Squares of Numbers Within a Specified Range (Case 1) ",
                    "description": "Construct a program to write out the squares of even positive integers less than or equal to 10."
                }
            },
            {
                "item": "664e4c2991363872f0ba3801",
                "type": "challenge",
                "details": {
                    "name": "Printing the Squares of Numbers Within a Specified Range (Case 2) ",
                    "description": "Construct a program to write out the squares of odd positive integers less than 10."
                }
            },
            {
                "item": "664e4c2b91363872f0ba3803",
                "type": "challenge",
                "details": {
                    "name": "Printing the Squares of Numbers Within a Specified Range (Case 3) ",
                    "description": "Construct a program to write out the squares of every number between 20 and 25, both inclusive."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e4c2591363872f0ba37f9",
        "name": "py_hot_dry",
        "items": [
            {
                "item": "664e4c1c91363872f0ba37f1",
                "type": "example",
                "details": {
                    "name": "Determining the Weather Condition (Case 1)",
                    "description": "Construct a program that determines whether it is both too hot and too dry based on the inputs that it receives from the user."
                }
            },
            {
                "item": "664e4c2091363872f0ba37f3",
                "type": "challenge",
                "details": {
                    "name": "Determining the Weather Condition (Case 2)",
                    "description": "Construct a program that determines whether it is either too hot or too dry (or both) based on the inputs that it receives from the user."
                }
            },
            {
                "item": "664e4c2191363872f0ba37f5",
                "type": "challenge",
                "details": {
                    "name": "Determining the Weather Condition (Case 3)",
                    "description": "Construct a program that determines whether it is too hot but not too dry based on the inputs that it receives from the user."
                }
            },
            {
                "item": "664e4c2391363872f0ba37f7",
                "type": "challenge",
                "details": {
                    "name": "Determining the Weather Condition (Case 4)",
                    "description": "Construct a program that determines whether it is either too hot or too dry but not both based on the inputs that it receives from the user."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e4c1891363872f0ba37ee",
        "name": "csedpad.22.Searching.searching(linearsearch)_1",
        "items": [
            {
                "item": "664e4c1191363872f0ba37ec",
                "type": "example",
                "details": {
                    "name": "csedpad.22.Searching.searching(linearsearch)_1",
                    "description": "This program linearly searches the array for the index or rank of the rollNumber entered by the user or student and prints out their rank, where \"index will be the rank if the number is present in the array\". If the index is \"0\", then the rank is \"0 + 1 = 1\", so being 1st."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e4c0d91363872f0ba37e9",
        "name": "csedpad.01.preliminary_topics.variables",
        "items": [
            {
                "item": "664e4c0791363872f0ba37e7",
                "type": "example",
                "details": {
                    "name": "csedpad.01.preliminary_topics.variables",
                    "description": "Construct a program that stores the player's information and displays it."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e4c0191363872f0ba37e3",
        "name": "objects_classes_loan",
        "items": [
            {
                "item": "664e4bb091363872f0ba37df",
                "type": "example",
                "details": {
                    "name": "The Class for Representing a Loan (Case 1)",
                    "description": "Construct a class that represents a loan. This class should contain data representing the interest rate, loan amount, and the length of loan period (in years); all of which could be accessed or changed only through the getter and setter methods. An instance of the class should be created by specifying annual interest rate, length of loan period, and loan amount.\\nThe other method of the this class should calculate the amount of monthly payments on the loan."
                }
            },
            {
                "item": "664e4bfc91363872f0ba37e1",
                "type": "challenge",
                "details": {
                    "name": "The Class for Representing a Loan (Case 2)",
                    "description": "Construct a class that represents a loan. This class should contain data representing the interest rate, loan amount, and the length of loan period (in years); all of which could be accessed or changed only through the getter and setter methods. An instance of the class should be created by specifying annual interest rate, length of loan period, and loan amount.\\nThe other methods of the this class should calculate the amount of monthly payments on the loan as well as the total payment."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e4bae91363872f0ba37db",
        "name": "py_classes_inheritance",
        "items": [
            {
                "item": "664e4bab91363872f0ba37d7",
                "type": "example",
                "details": {
                    "name": "Person and Employee Inheritance",
                    "description": "Construct two classes: one represents a Person and another one represents an Employee that should be defined as Person's child class. The classes should define the functions to check if the person is an employee and return the person's name."
                }
            },
            {
                "item": "664e4bac91363872f0ba37d9",
                "type": "challenge",
                "details": {
                    "name": "Person and Employee Inheritance Information",
                    "description": "Construct two classes: one represents a Person and another one represents an Employee that should be defined as Person's child class. The classes should define functions to display the employee's information"
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e4b9391363872f0ba37d2",
        "name": "while_loops.j_digits",
        "items": [
            {
                "item": "664e4b6b91363872f0ba37cc",
                "type": "example",
                "details": {
                    "name": "Printing Digits of an Integer from Right to Left",
                    "description": "Construct a program that prints the digits of an integer from right to left."
                }
            },
            {
                "item": "664e4b7891363872f0ba37ce",
                "type": "challenge",
                "details": {
                    "name": "The Digit Sum of an Integer",
                    "description": "Construct a program that calculates the sum of the digits of an integer."
                }
            },
            {
                "item": "664e4b8591363872f0ba37d0",
                "type": "challenge",
                "details": {
                    "name": "Reversing the Digits of an Integer",
                    "description": "Construct a program that reverses the digits of an integer mathematically."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e4b6991363872f0ba37c8",
        "name": "py_search_binary_recursive",
        "items": [
            {
                "item": "664e4b6491363872f0ba37c4",
                "type": "example",
                "details": {
                    "name": "Recursive Binary Search",
                    "description": "Construct a function that uses recursive binary search to find if a specific value is in a list (known as a \"key\"). Recall: Binary search uses the \"Divide and Conquer\" strategy. Given a list of ordered integers, the key is searched by dividing the data list in half and only searching in the half that contains the key, and repeating the process until the key is found and the index of the key is returned. If the key is not found, -1 is returned."
                }
            },
            {
                "item": "664e4b6691363872f0ba37c6",
                "type": "challenge",
                "details": {
                    "name": "Recursive Binary Search",
                    "description": "Construct a function that uses recursive binary search to find if a specific value is in a list (known as a \"key\"). Recall: Binary search uses the \"Divide and Conquer\" strategy. Given a list of ordered integers, the key is searched by dividing the data list in half and only searching in the half that contains the key, and repeating the process until the key is found and the index of the key is returned. If the key is not found, -1 is returned."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e4b5f91363872f0ba37bf",
        "name": "booleans.fail_course",
        "items": [
            {
                "item": "664e4b5591363872f0ba37b9",
                "type": "example",
                "details": {
                    "name": "Determining When a Student Fails a Course (Case 1)",
                    "description": "Construct a program to determine whether a student fails the course based on the inputs that it receives from the instructor. The student fails the course if the exam score is less than 55 or student has more than 2 missing homework."
                }
            },
            {
                "item": "664e4b5991363872f0ba37bb",
                "type": "challenge",
                "details": {
                    "name": "Determining When a Student Fails a Course (Case 2)",
                    "description": "Construct a program that determines whether a student fails the course based on the inputs that it receives from the instructor. The student fails the course if the exam score is less than 55 or when the student has cheated."
                }
            },
            {
                "item": "664e4b5c91363872f0ba37bd",
                "type": "challenge",
                "details": {
                    "name": "Determining When a Student Fails a Course (Case 3)",
                    "description": "Construct a program that determines whether a student fails the course based on the inputs that it receives from the instructor. The student fails the course if his/her score is not above the class average."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e4b5091363872f0ba37b6",
        "name": "csedpad.17.ClassesObjects.objects",
        "items": [
            {
                "item": "664e4b4a91363872f0ba37b4",
                "type": "example",
                "details": {
                    "name": "csedpad.17.ClassesObjects.objects",
                    "description": "This program shifts the x and y coordiantes by a given amount."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e4b3c91363872f0ba37af",
        "name": "while_loops.j_average",
        "items": [
            {
                "item": "664e4b2691363872f0ba37a9",
                "type": "example",
                "details": {
                    "name": "Calculating the Average of Input Integers",
                    "description": "Construct a program that reads a series of integers from the user, sums them up, and calculates their average. The user enters 0 to indicate the end of the input."
                }
            },
            {
                "item": "664e4b2b91363872f0ba37ab",
                "type": "challenge",
                "details": {
                    "name": "Calculating the Average of the Input Integers that are an Even Number",
                    "description": "Construct a program that reads a series of integer values from the user, sums up the integers that are an even number, and calculate their average. The user enters 0 to indicate the end of the input."
                }
            },
            {
                "item": "664e4b3291363872f0ba37ad",
                "type": "challenge",
                "details": {
                    "name": "Calculating the Average of Floating-Point Numbers",
                    "description": "Construct a program that reads a series of non-negative floating-point numbers from the user, sums them up, and calculate their average.\\nNote that you need to think what value should the program use to indicate the end of the input."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e4b2291363872f0ba37a6",
        "name": "csedpad.17.ClassesObjects.ClassExample1.classesandobjects",
        "items": [
            {
                "item": "664e4b1b91363872f0ba37a4",
                "type": "example",
                "details": {
                    "name": "csedpad.17.ClassesObjects.ClassExample1.classesandobjects",
                    "description": "This program creates two objects of BagDetail which will get the total number of balls from the bags."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e4b1691363872f0ba37a1",
        "name": "csedpad.14.TwoDimensionalArrays.no_topic",
        "items": [
            {
                "item": "664e4b0f91363872f0ba379f",
                "type": "example",
                "details": {
                    "name": "csedpad.14.TwoDimensionalArrays.no_topic",
                    "description": "This program calculates the average performance of 2 students by combining their performance in quiz, homework and discussion."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e4b0b91363872f0ba379c",
        "name": "csedpad.01.preliminary_topics.variables_expressions_constants_1",
        "items": [
            {
                "item": "664e4b0491363872f0ba379a",
                "type": "example",
                "details": {
                    "name": "What is the average speed?",
                    "description": "Construct a program that calculates the average speed in miles per hour using the values stored in the given variables. Then print (to the console) the height in meters with 2 digits after the decimal point."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e4afe91363872f0ba3796",
        "name": "files.j_input_stat",
        "items": [
            {
                "item": "664e4af591363872f0ba3792",
                "type": "example",
                "details": {
                    "name": "Reporting File Information (Case 1) ",
                    "description": " Construct a program that receives the full path to an input file from the user, reads that file and reports the number of lines, the longest line, and the number of words on each line. Make sure that the program handles each specific exception that could occur."
                }
            },
            {
                "item": "664e4af891363872f0ba3794",
                "type": "challenge",
                "details": {
                    "name": "Reporting File Information (Case 2) ",
                    "description": " Construct a program that receives the full path to an input file from the user, reads that file and reports the number of lines, the longest line, the number of words on each line, and the length of the longest word on each line. Make sure that the program handles each specific exception that could occur."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e47ed91363872f0ba378b",
        "name": "csedpad.22.Searching.searching(binarysearch)",
        "items": [
            {
                "item": "664e47e791363872f0ba3789",
                "type": "example",
                "details": {
                    "name": "csedpad.22.Searching.searching(binarysearch)",
                    "description": "This program implements Binary Search using a recursive algorithm (recursion is used in this algorithm"
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e47e391363872f0ba3785",
        "name": "py_trees_traversal",
        "items": [
            {
                "item": "664e47d891363872f0ba3781",
                "type": "example",
                "details": {
                    "name": "Tree traversal.",
                    "description": "The tree can be traversed by deciding on a sequence to visit each node. There are three traversal algorithms: in-order traversal, pre-order traversal and post-order traversal.\\n<b>In-order traversal</b> visits the nodes from the left, the root node and the right\\n<b>Pre-order traversal</b> visits the nodes from the root node, the left and the right\\n<b>Post-order traversal</b> visits the nodes from the left, the right and the root node.\\nIn this example, we construct an in-order traversal algorithm. "
                }
            },
            {
                "item": "664e47e091363872f0ba3783",
                "type": "challenge",
                "details": {
                    "name": "Tree traversal.",
                    "description": "The tree can be traversed by deciding on a sequence to visit each node. There are three traversal algorithms: in-order traversal, pre-order traversal and post-order traversal.\\n<b>In-order traversal</b> visits the nodes from the left, the root node and the right\\n<b>Pre-order traversal</b> visits the nodes from the root node, the left and the right\\n<b>Post-order traversal</b> visits the nodes from the left, the right and the root node.\\nIn this challenge, we construct an post-order traversal algorithm. "
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e44e391363872f0ba377a",
        "name": "csedpad.13.Arrays.arrays",
        "items": [
            {
                "item": "664e44dc91363872f0ba3778",
                "type": "example",
                "details": {
                    "name": "csedpad.13.Arrays.arrays",
                    "description": "This program calculates the highest and lowest grade scores among 10 student grade scores. Once found, it displays the highest and lowest grade scores."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e44db91363872f0ba3773",
        "name": "py_fail_course",
        "items": [
            {
                "item": "664e44d691363872f0ba376d",
                "type": "example",
                "details": {
                    "name": "Determining When a Student Fails a Course (Case 1)",
                    "description": "Construct a program to determine whether a student fails the course based on the inputs that it receives from the instructor. The student fails the course if the exam score is less than 55 or student has more than 2 missing homework."
                }
            },
            {
                "item": "664e44d891363872f0ba376f",
                "type": "challenge",
                "details": {
                    "name": "Determining When a Student Fails a Course (Case 2)",
                    "description": "Construct a program that determines whether a student fails the course based on the inputs that it receives from the instructor. The student fails the course if the exam score is less than 55 or when the student has cheated."
                }
            },
            {
                "item": "664e44d991363872f0ba3771",
                "type": "challenge",
                "details": {
                    "name": "Determining When a Student Fails a Course (Case 3)",
                    "description": "Construct a program that determines whether a student fails the course based on the inputs that it receives from the instructor. The student fails the course if his/her score is not above the class average."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e44d391363872f0ba3768",
        "name": "py_check_adjacent",
        "items": [
            {
                "item": "664e44cd91363872f0ba3762",
                "type": "example",
                "details": {
                    "name": "Finding Adjacent Duplicates in a Sequence of Numbers",
                    "description": "Construct a program that checks whether a sequence of numbers, entered one at a time, contains adjacent duplicates. The user enters -1 to indicate the end of the input.\\nFor example, 4 is a duplicate in the sequence of numbers 1, 3, 4, 4, -1."
                }
            },
            {
                "item": "664e44cf91363872f0ba3764",
                "type": "challenge",
                "details": {
                    "name": "Finding Adjacent Consecutive Numbers in a Sequence of Integers",
                    "description": "Construct a program that checks whether a sequence of integers, entered one at a time, contains adjacent integers that are consecutive. The user enters -1 to indicate the end of the input.\\nNote that integers which follow each other in order, without gaps, from smallest to largest are consecutive numbers. For example, 12, 13, 14 and 15 are consecutive numbers."
                }
            },
            {
                "item": "664e44d191363872f0ba3766",
                "type": "challenge",
                "details": {
                    "name": "Finding Adjacent Numbers in Ascending Order in a Sequence of Numbers",
                    "description": "Construct a program that checks whether a sequence of non-zero numbers, entered one at a time, contains adjacent numbers in ascending order. Numbers are said to be in ascending order when they are arranged from the smallest to the largest number. For example, 5, 9, 13, 17 and 21 are arranged in ascending order.\\nNote that you need to think what value should the program use to indicate the end of the input."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e44ca91363872f0ba375f",
        "name": "csedpad.10.DoWhile.do-whileloops",
        "items": [
            {
                "item": "664e44c891363872f0ba375d",
                "type": "example",
                "details": {
                    "name": "csedpad.10.DoWhile.do-whileloops",
                    "description": "Repeatedly prompt the user to guess the number of floors in the world's tallest building, the Burj Khalifa in Dubai. Each time the user enters an incorrect guess, tell them if their guess was too low or too high, and ask them to guess again. If the user enters the correct answer, congratulate them, and the game is over. A user can give up by entering -1."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e44c691363872f0ba3759",
        "name": "py_list_fill",
        "items": [
            {
                "item": "664e44c291363872f0ba3755",
                "type": "example",
                "details": {
                    "name": "Add Values to an Empty List (Case 1)",
                    "description": "Construct a program that creates a list of first ten positive odd numbers."
                }
            },
            {
                "item": "664e44c491363872f0ba3757",
                "type": "challenge",
                "details": {
                    "name": "Add Values to an Empty List (Case 2)",
                    "description": "Construct a program that creates a list of eight string values received from the user."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e44ab91363872f0ba3751",
        "name": "arrays.j_temperature",
        "items": [
            {
                "item": "664e448b91363872f0ba374d",
                "type": "example",
                "details": {
                    "name": "Finding the Number of Days Above the Average Temperature",
                    "description": "Construct a program that reads a series of temperatures and reports the average temperature and the number of the days that are above the average. Assume that the input values could have a decimal point."
                }
            },
            {
                "item": "664e449291363872f0ba374f",
                "type": "challenge",
                "details": {
                    "name": "Displaying the Days That are Above 32 Degrees Fahrenheit",
                    "description": "Construct a program that reads a series of temperatures and reports the days that are above 32 degrees Fahrenheit. Assume that the temperature values are in Fahrenheit. Also assume that input values could have a decimal point."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e448991363872f0ba3749",
        "name": "py_bmi_calculator",
        "items": [
            {
                "item": "664e448691363872f0ba3745",
                "type": "example",
                "details": {
                    "name": "Calculating Body Mass Index (BMI)",
                    "description": "BMI is a measure of body fat based on height and weight that applies to adult men and women. BMI Categories are as follows:\\nUnderweight = <18.5\\nNormal weight = 18.5–24.9\\nOverweight = 25–29.9\\nObesity = BMI of 30 or greater.\\nEnglish BMI Formula (Imperial) is: BMI = (Weight in Pounds / (Height in inches x Height in inches)) x 703.\\nConstruct a program that calculates the Body Mass Index (BMI) according to this formula."
                }
            },
            {
                "item": "664e448891363872f0ba3747",
                "type": "challenge",
                "details": {
                    "name": "Calculating and Rounding Up Body Mass Index (BMI) To the Nearest Integer",
                    "description": "BMI is a measure of body fat based on height and weight that applies to adult men and women. BMI Categories are as follows: \\nUnderweight = <18.5\\nNormal weight = 18.5–24.9\\nOverweight = 25–29.9\\nObesity = BMI of 30 or greater.\\nEnglish BMI Formula (Imperial) is: BMI = (Weight in Pounds / (Height in inches x Height in inches)) x 703.\\n BMI results are usually displayed as integers (values without decimal points). Construct a program to round the BMI result to the nearest integer."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e448191363872f0ba3740",
        "name": "csedpad.20.Recursion.recursion_1",
        "items": [
            {
                "item": "664e447791363872f0ba373a",
                "type": "example",
                "details": {
                    "name": "csedpad.20.Recursion.recursion_1",
                    "description": "This program recursively generates the length of a given student first name."
                }
            },
            {
                "item": "664e447d91363872f0ba373c",
                "type": "example",
                "details": {
                    "name": "csedpad.20.Recursion.recursion_1",
                    "description": "This program desrcibes how many different ways we can arrange  n T-Shirts."
                }
            },
            {
                "item": "664e448091363872f0ba373e",
                "type": "example",
                "details": {
                    "name": "csedpad.20.Recursion.recursion_1",
                    "description": "This program computes Fibonacci numbers using a recursive method."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e447591363872f0ba3736",
        "name": "py_nested_if_temperature",
        "items": [
            {
                "item": "664e447191363872f0ba3732",
                "type": "example",
                "details": {
                    "name": "Warning the User about the Changes in the Temperature",
                    "description": "Construct a program that receives the temperature for today and yesterday and warns the user when it is getting colder or warmer or neither. The temperature values could have a decimal point."
                }
            },
            {
                "item": "664e447391363872f0ba3734",
                "type": "challenge",
                "details": {
                    "name": "Warning the User about the Changes in the Temperature and Humidity",
                    "description": "Construct a program that receives the temperature and humidity for today and yesterday and warns the user when it is getting colder or warmer or neither. When it is getting warmer, the program should also warn the user about the changes in humidity. In particular, it should warn the user when today's humidity is more, less, or has not changed compared to yesterday's humidity. Note that the temperature and humidity values could have a decimal point."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e446d91363872f0ba372f",
        "name": "csedpad.05.LogicalOperators.logicaloperator",
        "items": [
            {
                "item": "664e446691363872f0ba372d",
                "type": "example",
                "details": {
                    "name": "csedpad.05.LogicalOperators.logicaloperator",
                    "description": "this program checks whether a year is a leap year or not"
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e443791363872f0ba3729",
        "name": "inheritance.animals",
        "items": [
            {
                "item": "664e43ec91363872f0ba3725",
                "type": "example",
                "details": {
                    "name": "Animal Class Hierarchy (Case 1) ",
                    "description": "Suppose we have a class Animal and we want to extend it to produce class Dog. An animal has a name. A Dog has a name and an owner. Write the class declarations, the constructors, and the toString methods for these two classes.\\n\\nThe class AnimalTester1 tests these classes and their methods."
                }
            },
            {
                "item": "664e440791363872f0ba3727",
                "type": "challenge",
                "details": {
                    "name": " Animal Class Hierarchy (Case 2) ",
                    "description": "Suppose we have a class Animal and we want to extend it to produce class Dog. An animal has a name. A Dog has a name and an owner. Write the class declarations, the constructors, and the toString methods for these two classes. Also, include a method called speak to print a string that represents an animal's and a dog's voice. We show the voice of an animal by printing its name. We show the voice of a dog by printing its name followed by the text Woof Woof.\\n\\nThe class AnimalTester2 tests these classes and their methods."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e43ea91363872f0ba371f",
        "name": "py_input",
        "items": [
            {
                "item": "664e43e491363872f0ba3717",
                "type": "example",
                "details": {
                    "name": "Receiving Input Integers Until a Certain Condition is Met (Case 1)",
                    "description": "Construct a program that receives an integer from the user, outputs that integer, and stops receiving integers when the user enters a negative integer."
                }
            },
            {
                "item": "664e43e591363872f0ba3719",
                "type": "challenge",
                "details": {
                    "name": "Receiving Input Integers Until a Certain Condition is Met (Case 2)",
                    "description": "Construct a program that receives an integer from the user, outputs that integer, and stops receiving integers when the user enters an integer that is not in the range of 30 to 90 both inclusive."
                }
            },
            {
                "item": "664e43e791363872f0ba371b",
                "type": "challenge",
                "details": {
                    "name": "Receiving Input Integers Until a Certain Condition is Met (Case 3)",
                    "description": "Construct a program that receives an integer from the user, outputs that integer, and stops receiving integers when the user enters a negative integer or an integer greater than 1000."
                }
            },
            {
                "item": "664e43e991363872f0ba371d",
                "type": "challenge",
                "details": {
                    "name": "Receiving Input Integers Until a Certain Condition is Met (Case 4)",
                    "description": "Construct a program that receives an integer from the user, outputs that integer, and stops receiving integers when the user enters an even integer less than 10."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e43e191363872f0ba3714",
        "name": "csedpad.01.preliminary_topics.variables_expressions_primitivedatatypes_1",
        "items": [
            {
                "item": "664e43df91363872f0ba3712",
                "type": "example",
                "details": {
                    "name": "csedpad.01.preliminary_topics.variables_expressions_primitivedatatypes_1",
                    "description": "This program displays a student' s profile within a university."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e43bf91363872f0ba370e",
        "name": "inheritance.point",
        "items": [
            {
                "item": "664e430591363872f0ba370a",
                "type": "example",
                "details": {
                    "name": "Point Class Hierarchy (Case 1) ",
                    "description": "Suppose we have a class Point and we want to extend it to produce class Point3D. The class Point has two data members, x and y that represent the point's integer coordinates in the two-dimensional space. A Point3D has three data members, x, y, and z that represent the point's integer coordinates in the three-dimensional space. Write the class declarations, the constructors, and the toString methods for these two classes.\\n\\nThe class InheritancePointTester1 tests these classes and their methods."
                }
            },
            {
                "item": "664e439f91363872f0ba370c",
                "type": "challenge",
                "details": {
                    "name": "Point Class Hierarchy (Case 2) ",
                    "description": "Suppose we have a class Point and we want to extend it to produce class Point3D. The class Point has two data members, x and y that represent the point's integer coordinates in the two-dimensional space. A Point3D has three data members, x, y, and z that represent the point's integer coordinates in the three-dimensional space. For each class, write the class declaration, the constructor, the toString method, and a method to move (translate) the point, i.e., shift the point's location by the specified amount.\\n\\nThe class InheritancePointTester2 tests these classes and their methods."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e430191363872f0ba3706",
        "name": "nested_for.star_patterns",
        "items": [
            {
                "item": "664e42fb91363872f0ba3702",
                "type": "example",
                "details": {
                    "name": "Printing A Right Triangle Star Pattern",
                    "description": "A Right triangle star pattern contains N asterisks in N-th row. Construct a program that receives the number of rows in the right triangle star pattern and prints that triangle. For example, when the number of rows in the right triangle star pattern is 5, the program prints the following output:\\n*\\n**\\n***\\n****\\n*****"
                }
            },
            {
                "item": "664e42fe91363872f0ba3704",
                "type": "challenge",
                "details": {
                    "name": "Printing an Inverted Right Triangle Star Pattern",
                    "description": "An inverted right triangle star pattern of N rows contains N-i+1 asterisks in the i-th row. Construct a program that receives the number of rows in the inverted right triangle star pattern and prints that triangle. For example, when the number of rows in the inverted right triangle star pattern is 5, the program prints the following output:\\n*****\\n****\\n***\\n**\\n*"
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e42f791363872f0ba36fe",
        "name": "exceptions.j_check_age",
        "items": [
            {
                "item": "664e42eb91363872f0ba36fa",
                "type": "example",
                "details": {
                    "name": "Determining Whether One is a Teenager (Case 1) ",
                    "description": "Construct a program that receives a string that has the user name and age separated by a colon, and prints whether the user is a teenager. Make sure that the program handles all possible exceptions."
                }
            },
            {
                "item": "664e42f391363872f0ba36fc",
                "type": "challenge",
                "details": {
                    "name": "Determining Whether One is a Teenager (Case 2) ",
                    "description": "Construct a program that asks the user to enter a string that has the user name and age separated by a colon, and prints whether the user is a teenager. Make sure that the program handles all possible exceptions. The program must ask the user for an input until the user enters a string that could be processed without any exception."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e42e791363872f0ba36f7",
        "name": "csedpad.12.NestedLoops.nestedloops",
        "items": [
            {
                "item": "664e42e191363872f0ba36f5",
                "type": "example",
                "details": {
                    "name": "csedpad.12.NestedLoops.nestedloops",
                    "description": "Print a triangle of stars."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e42de91363872f0ba36f1",
        "name": "py_print_medals",
        "items": [
            {
                "item": "664e42af91363872f0ba36ed",
                "type": "example",
                "details": {
                    "name": "Printing Table of Medal Counts with Row Totals",
                    "description": "Assume that we have a 7x4 matrix that stores the number of medals that seven countries won in the skating competitions at the Winter Olympic. This matrix looks like as follows:\\n[[ \"Canada\", 1, 0, 1 ],\\n [ \"China\", 1, 1, 0 ],\\n ...]\\nEach row of this matrix corresponds to the medal counts for the country in that row. The second, third, and fourth numbers within a row represent the number of Gold, Silver, and Bronze medals won by the corresponding country in that row.\\nConstruct a program that takes this matrix and prints a table of medal counts with row total that shows the number of Gold, Silver, Bronze, and Total medals for each of the countries who participated in the competition. The output table should look like as follows:\\n    Country    Gold  Silver  Bronze   Total\\n     Canada        1       0       1            2\\n        China        1       1       0            2\\n       ...\\n"
                }
            },
            {
                "item": "664e42dc91363872f0ba36ef",
                "type": "challenge",
                "details": {
                    "name": "Printing Table of Medal Winner Counts with Row and Column Totals",
                    "description": "Assume that we have a 7x4 matrix that stores the number of medals that seven countries won in the skating competitions at the Winter Olympic. This matrix looks like as follows:\\n[[ \"Canada\", 1, 0, 1 ],\\n [ \"China\", 1, 1, 0 ],\\n ...]\\nEach row of this matrix corresponds to the medal counts for the country in that row. The second, third, and fourth numbers within a row represent the number of Gold, Silver, and Bronze medals won by the corresponding country in that row.\\nConstruct a program that takes this matrix and prints a table of medal counts with row and column totals. The column totals are the sum of the gold, silver, and bronze medals won in the competition. The output table should look like as follows:\\n      Country    Gold  Silver  Bronze   Total\\n         Canada        1       0       1          2\\n            China        1       1       0          2\\n           ...\\nColumn Total      4       4       4"
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e42ab91363872f0ba36ea",
        "name": "csedpad.06.If.ifstatement",
        "items": [
            {
                "item": "664e42a491363872f0ba36e8",
                "type": "example",
                "details": {
                    "name": "csedpad.06.If.ifstatement",
                    "description": "Given a number, this program checks whether the number is even or not."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e42a291363872f0ba36e4",
        "name": "py_divisor",
        "items": [
            {
                "item": "664e429891363872f0ba36e0",
                "type": "example",
                "details": {
                    "name": "Finding the Smallest Divisor of a Positive Number",
                    "description": "Construct a program that finds the smallest divisor (other than 1) of a positive number. For example, the smallest divisor of 4 is 2."
                }
            },
            {
                "item": "664e42a091363872f0ba36e2",
                "type": "challenge",
                "details": {
                    "name": "Finding the Largest Divisor of a Positive Number",
                    "description": "Construct a program that finds the largest divisor of a positive number, excluding the number itself. For example, the largest divisor of 24 is 12."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e429291363872f0ba36dc",
        "name": "exceptions.j_check_producut_code",
        "items": [
            {
                "item": "664e427b91363872f0ba36d8",
                "type": "example",
                "details": {
                    "name": "Counting the Number of Valid and Banned Product Codes (Case 1) ",
                    "description": "Suppose a hypothetical company uses codes to represent its various products. A product code includes, among other information, a character in the tenth position that represents the zone from which that product was made. Due to some reorganization, products from zone R are banned from being sold.\\nConstruct a program that reads product codes from the user and counts the number of valid and banned codes entered. Make sure that the program handles all possible exceptions.\\nThe program must ask the user for an input until the user enters STOP."
                }
            },
            {
                "item": "664e428b91363872f0ba36da",
                "type": "challenge",
                "details": {
                    "name": "Counting the Number of Valid and Banned Product Codes (Case 2) ",
                    "description": "Suppose a hypothetical company uses codes to represent its various products. A product code includes, among other information, a character in the tenth position that represents the zone from which that product was made, and a four-digit integer representing the district in which it will be sold. This four-digit integer begins at the 4th character and extends to the 7th character in the input code (inclusive). Due to some reorganization, products from zone R are banned from being sold in districts with a designation of 2000 or higher.\\nConstruct a program that reads product codes from the user and counts the number of valid and banned codes entered. Make sure that the program handles all possible exceptions.\\nThe program must ask the user for an input until the user enters STOP."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e427a91363872f0ba36d4",
        "name": "py_nested_if_min_max",
        "items": [
            {
                "item": "664e427691363872f0ba36d0",
                "type": "example",
                "details": {
                    "name": "Determining the Smallest of the Three Integers",
                    "description": "Construct a program that determines the smallest of the three integer values entered by the user."
                }
            },
            {
                "item": "664e427891363872f0ba36d2",
                "type": "challenge",
                "details": {
                    "name": "Determining the Largest of the Three Integers",
                    "description": "Construct a program that determines the largest of the three integer values entered by the user."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e427491363872f0ba36cc",
        "name": "py_range_one",
        "items": [
            {
                "item": "664e427291363872f0ba36c8",
                "type": "example",
                "details": {
                    "name": "Printing Consecutive Numbers Starting from Zero (Case 1) ",
                    "description": "Construct a program that prints a sequence of numbers from 0 (inclusive) to 10 (exclusive)."
                }
            },
            {
                "item": "664e427391363872f0ba36ca",
                "type": "challenge",
                "details": {
                    "name": "Printing Consecutive Numbers Starting from Zero (Case 2) ",
                    "description": "Construct a program that prints a sequence of numbers from 0 (inclusive) to 6 (exclusive)."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e426f91363872f0ba36c4",
        "name": "py_trees_insert_binarytree",
        "items": [
            {
                "item": "664e426c91363872f0ba36c0",
                "type": "example",
                "details": {
                    "name": "Inserting binary tree",
                    "description": "In a BinaryTree, adding new nodes to the tree is an important capability to have.\\nConstruct a simple implementation of a BinaryTree consisting of an __init__ method and an insertLeft method, which adds new nodes to the tree to the left of the root. "
                }
            },
            {
                "item": "664e426e91363872f0ba36c2",
                "type": "challenge",
                "details": {
                    "name": "Inserting binary tree",
                    "description": "In a BinaryTree, adding new nodes to the tree is an important capability to have.\\nConstruct a simple implementation of a BinaryTree consisting of an __init__ method and an insertRight method, which adds new nodes to the tree to the right of the root."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e426491363872f0ba36bb",
        "name": "csedpad.09.WhileLoops.whileloops_1",
        "items": [
            {
                "item": "664e425191363872f0ba36b5",
                "type": "example",
                "details": {
                    "name": "csedpad.09.WhileLoops.whileloops_1",
                    "description": "Construct a program that finds the smallest divisor (other than 1) of a positive number. For example, the smallest divisor of 4 is 2."
                }
            },
            {
                "item": "664e425791363872f0ba36b7",
                "type": "example",
                "details": {
                    "name": "csedpad.09.WhileLoops.whileloops_1",
                    "description": "Bank overdraft warning. We implement a computer program that monitors a bank account with an initial balance of $1,000 and from which a number of withdrawals are done each in the amount of $100. When balance drops below $150 a warning is displayed. When balance drops to 0 an bank overdraft message is displayed."
                }
            },
            {
                "item": "664e425e91363872f0ba36b9",
                "type": "example",
                "details": {
                    "name": "csedpad.09.WhileLoops.whileloops_1",
                    "description": "Assume you have a list of 1,000 people in alphabetical order and you are assigned to collect from the first person on the list $1, from the second person $2, and so on fomr the 1,000th person you collect $1,000. How much money will you collect in total. This is equivalent to finding the sum of natural numbers from 1 to 1,000."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e424a91363872f0ba36b1",
        "name": "objects_classes_tv",
        "items": [
            {
                "item": "664e423b91363872f0ba36ad",
                "type": "example",
                "details": {
                    "name": "The Class for Representing a TV (Case 1)",
                    "description": "Construct a class that represents a TV. The class should contain data that represents the TV's state (power on or off, current channel). The state of the TV could be accessed or changed only through the getter and setter methods. The class should also include methods to change the state of the TV (turn on/off, change channels). Assume that the valid channel range is from 1 to 120 (both inclusive)."
                }
            },
            {
                "item": "664e424391363872f0ba36af",
                "type": "challenge",
                "details": {
                    "name": "The Class for Representing a TV (Case 2)",
                    "description": "Construct a class that represents a TV. The class should contain data that represents the TV's state (power on or off, current volume level). The state of the TV could be accessed or changed only through the getter and setter methods. The class should also include methods to change the state of the TV (turn on/off, change volume level). Assume that the volume level is an integer and ranges from 1 to 7 (both inclusive)."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e423991363872f0ba36a9",
        "name": "py_str_count",
        "items": [
            {
                "item": "664e423491363872f0ba36a5",
                "type": "example",
                "details": {
                    "name": "Counting the Occurrences of One String in Another (Case 1)",
                    "description": "Construct a program that has a function that receives a string and returns the number of times that the string \"hi\" appears anywhere in the given string, ignoring the case."
                }
            },
            {
                "item": "664e423691363872f0ba36a7",
                "type": "challenge",
                "details": {
                    "name": "Counting the Occurrences of One String in Another (Case 2)",
                    "description": "Construct a program that has a function that receives a string and returns the number of times that the string \"hi?t\" appears anywhere in the given string where '?' could be any letter. For example, \"hint\" and \"hilt\" would count as a match.\\nAll string comparisons should be case-insensitive."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e423291363872f0ba36a0",
        "name": "py_rent_car",
        "items": [
            {
                "item": "664e422e91363872f0ba369a",
                "type": "example",
                "details": {
                    "name": "Determining When a Customer Could Rent a Car (Case 1)",
                    "description": "Construct a program that determines whether a customer could rent a car based on the inputs that it receives from the car rental agent. Rental cars are available to licensed drivers of 21 years of age or over."
                }
            },
            {
                "item": "664e423091363872f0ba369c",
                "type": "challenge",
                "details": {
                    "name": "Determining When a Customer Could Rent a Car (Case 2)",
                    "description": "Construct a program that determines whether a customer could rent a car based on the inputs that it receives from the car rental agent. Rental cars are available to licensed drivers of 21 years of age or over who have not had a car accident."
                }
            },
            {
                "item": "664e423191363872f0ba369e",
                "type": "challenge",
                "details": {
                    "name": "Determining When a Customer Could Rent a Car (Case 3)",
                    "description": "Construct a program that determines whether a customer could rent a car based on the inputs that it receives from the car rental agent. Rental cars are available to licensed drivers who are either at least 21 years old or have a credit card with $10,000 or more of credit."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e422b91363872f0ba3696",
        "name": "ifelse.if_else_wage",
        "items": [
            {
                "item": "664e422591363872f0ba3692",
                "type": "example",
                "details": {
                    "name": "Calculating the Employee's Wage Based on the Hours That the Employee Has Worked and an Hourly Pay Rate",
                    "description": "Construct a program for the payment department of a company to calculate the wage of an employee based on the number of hours that the employee has worked. If an employee works over 40 hours in a week, the payment amount should take into account the overtime hours. The overtime hours are paid at a rate one and a half times the regular pay rate."
                }
            },
            {
                "item": "664e422891363872f0ba3694",
                "type": "challenge",
                "details": {
                    "name": "Calculating the Wage of an Employee at the Customer Service Call Center",
                    "description": "Construct a program for the payment department of a company to calculate the wage of an employee who works at the customer service call center. Like other employees in the company, the employees at the customer service call center are paid based on the hours that they work. If they work over 40 hours in a week, the payment amount should take into account the overtime hours. The overtime hours are paid at a rate one and a half times the regular pay rate.\\nThe company's policy is to pay more to those employees at the customer service call center who work during weekends. Therefore, the minimum extra pay that the employees could receive for each day of work during weekends is $30. The extra pay increases to the maximum of $50 for the employees who have at least 5 days of work during weekends."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e422491363872f0ba368e",
        "name": "py_sorting_selection_sort",
        "items": [
            {
                "item": "664e422191363872f0ba368a",
                "type": "example",
                "details": {
                    "name": "Selection sort",
                    "description": "Ascending-order Selection sort operates by finding the minimum element of an array and moving it to the “beginning” of the array, with the “beginning” of the array incrementing forward after each element is placed in its proper position. Construct a function that performs selection sort on the given list, in ascending order. "
                }
            },
            {
                "item": "664e422291363872f0ba368c",
                "type": "challenge",
                "details": {
                    "name": "Selection sort",
                    "description": "Descending-order Selection sort operates by finding the maximum element of an array and moving it to the “beginning” of the array, with the “beginning” of the array incrementing forward after each element is placed in its proper position. Construct a function that performs selection sort on the given list, in descending order."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e421991363872f0ba3686",
        "name": "py_student_score",
        "items": [
            {
                "item": "664e41f891363872f0ba3682",
                "type": "example",
                "details": {
                    "name": "Creating a Dictionary of Student-Scores Pairs (Case 1) ",
                    "description": "Assume we have a list of students and a list of their corresponding test scores. Construct a program that has a function which receives these two lists and returns a dictionary that maps each student to the scores of that student.\\nFor example, if the student list is ['Sam', 'Kim', 'Sam'] and the scores list is [15, 10, 14], the program creates the following dictionary:\\n{'Sam': [15, 14], 'Kim': [10]}"
                }
            },
            {
                "item": "664e421291363872f0ba3684",
                "type": "challenge",
                "details": {
                    "name": "Creating a Dictionary of Student-Scores Pairs (Case 2)",
                    "description": "Assume we have a list of students and a list of their corresponding test scores. Construct a program that has two functions:\\n- a function that receives these two lists and returns a dictionary that maps each student to the scores of that student, and \\n- a function that receives the dictionary created by the above function and calculates the average score of each student"
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e41f491363872f0ba367f",
        "name": "csedpad.14.TwoDimensionalArrays.twodimensionalarrays",
        "items": [
            {
                "item": "664e41ed91363872f0ba367d",
                "type": "example",
                "details": {
                    "name": "csedpad.14.TwoDimensionalArrays.twodimensionalarrays",
                    "description": "Generate a 5 x 5 Bingo board and initialize it with random numbers from 1 to 75. The board will be populated from the top-left corner, one row at a time, all the way to the bottom right corner."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e41ec91363872f0ba367a",
        "name": "csedpad.01.preliminary_topics.variables_expressions_constants",
        "items": [
            {
                "item": "664e41ea91363872f0ba3678",
                "type": "example",
                "details": {
                    "name": "How tall are you in meters?",
                    "description": "Construct a program that converts the height in feet (stored in variable heightInFeet) to meters using the constant feet to meter conversion rate 0.30479. Then print the height in meters with 3 digits after the decimal point to the console."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e41d191363872f0ba3673",
        "name": "for_loops.j_squares",
        "items": [
            {
                "item": "664e41a491363872f0ba366d",
                "type": "example",
                "details": {
                    "name": "Printing the Squares of Numbers Within a Specified Range (Case 1) ",
                    "description": "Construct a program to write out the squares of even positive integers less than or equal to 10."
                }
            },
            {
                "item": "664e41b391363872f0ba366f",
                "type": "challenge",
                "details": {
                    "name": "Printing the Squares of Numbers Within a Specified Range (Case 2) ",
                    "description": "Construct a program to write out the squares of odd positive integers less than 10."
                }
            },
            {
                "item": "664e41c291363872f0ba3671",
                "type": "challenge",
                "details": {
                    "name": "Printing the Squares of Numbers Within a Specified Range (Case 3) ",
                    "description": "Construct a program to write out the squares of every number between 20 and 25, both inclusive."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e419c91363872f0ba3668",
        "name": "csedpad.13.Arrays.arrays_1",
        "items": [
            {
                "item": "664e418991363872f0ba3662",
                "type": "example",
                "details": {
                    "name": "csedpad.13.Arrays.arrays_1",
                    "description": "This program generates the numbers from 0 to 10 which represent the numbers to be printed on the t-shirts of a soccer team which consists of 11 players. The goalkeeper prefers number 0 which is why the numbers will be from 0 to 10 instead of 1 to 11. The numbers are stored together in a collection of values called an array. This program demonstrates how to create an array, how to assign values to the elements of the array and how to print the values of the array."
                }
            },
            {
                "item": "664e419091363872f0ba3664",
                "type": "example",
                "details": {
                    "name": "csedpad.13.Arrays.arrays_1",
                    "description": "Count the total number of vegetables in a shopping bag. The shopping cart bag contains different quantities of various vegetables which are specified."
                }
            },
            {
                "item": "664e419691363872f0ba3666",
                "type": "example",
                "details": {
                    "name": "csedpad.13.Arrays.arrays_1",
                    "description": "This program will pick four cards at random from a deck of 52 cards."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e418191363872f0ba365d",
        "name": "csedpad.07.IfElse.no_topic_1",
        "items": [
            {
                "item": "664e416e91363872f0ba3657",
                "type": "example",
                "details": {
                    "name": "csedpad.07.IfElse.no_topic_1",
                    "description": "This program assigns a jersey to one of two teams, teamE if jersey number is even else to teamO"
                }
            },
            {
                "item": "664e417591363872f0ba3659",
                "type": "example",
                "details": {
                    "name": "csedpad.07.IfElse.no_topic_1",
                    "description": "Conversion of temperature from one scale to the other."
                }
            },
            {
                "item": "664e417b91363872f0ba365b",
                "type": "example",
                "details": {
                    "name": "csedpad.07.IfElse.no_topic_1",
                    "description": "Assign letter grades to a given score by comparing the test score with the test score range for a given grade"
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e416c91363872f0ba3654",
        "name": "csedpad.08.Switch.switchstatements",
        "items": [
            {
                "item": "664e416a91363872f0ba3652",
                "type": "example",
                "details": {
                    "name": "Numeric Day of the Week to Name Conversion",
                    "description": "Given a user-supplied numeric day of the week (1, 2, 3, etc.), output the corresponding name for the day (Monday, Tuesday, Wednesday, etc.)."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e416691363872f0ba364f",
        "name": "csedpad.preliminary_topics.variables_expressions_primitivedatatypes",
        "items": [
            {
                "item": "664e415f91363872f0ba364d",
                "type": "example",
                "details": {
                    "name": "csedpad.preliminary_topics.variables_expressions_primitivedatatypes",
                    "description": "This program displays students' profiles within a university."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e415691363872f0ba3649",
        "name": "objects.classes.point",
        "items": [
            {
                "item": "664e413b91363872f0ba3645",
                "type": "example",
                "details": {
                    "name": "The Class for Representing a Point in the Euclidean Plane (Case 1)",
                    "description": "Construct a class that represents a point in the Euclidean plane. The class should contain data that represents the point’s integer coordinates (x,y). The class should also include getter and setter methods for accessing and changing the point's coordinates and a method to translate the point, i.e.,  shift the point's location by the specified amount.\\n\\nThe class PointTester1 instantiates an object from this class, sets the (x,y) coordinates of the point, and translates the point by the specified amount."
                }
            },
            {
                "item": "664e414d91363872f0ba3647",
                "type": "challenge",
                "details": {
                    "name": "The Class for Representing a Point in the Euclidean Plane (Case 2)",
                    "description": "Construct a class that represents a point in the Euclidean plane. The class should contain data that represents the point’s integer coordinates (x,y). The class should also include getter and setter methods for accessing and changing the point's coordinates and a method to calculate and return the point's distance from the origin (0,0).\\n\\nThe class PointTester2 instantiates an object from this class, sets the (x,y) coordinates of the point, and calculates the distance between this point and origin."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e413991363872f0ba3642",
        "name": "csedpad.17.ClassesObjects.ClassExample3.classesandobjects",
        "items": [
            {
                "item": "664e413791363872f0ba3640",
                "type": "example",
                "details": {
                    "name": "csedpad.17.ClassesObjects.ClassExample3.classesandobjects",
                    "description": "This program calls Groceries static and instance method by creating new object of Groceries"
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e413491363872f0ba363c",
        "name": "ifelse.if_else_if_grade",
        "items": [
            {
                "item": "664e412c91363872f0ba3638",
                "type": "example",
                "details": {
                    "name": "Determining the Letter Grade Of a Student",
                    "description": "Construct a program that receives a score from the user and determines the grade as follows:\\nA for scores ≥ 90\\nB for scores ≥ 80\\nC for scores ≥ 70\\nD for scores ≥ 60\\nF for scores < 60\\n"
                }
            },
            {
                "item": "664e413191363872f0ba363a",
                "type": "challenge",
                "details": {
                    "name": "Converting the Letter Grade of a Student to It's Numeric Range",
                    "description": "Construct a program that receives a grade from the user and prints the numeric range for that grade using the following grading rules:\\nA for scores ≥ 90\\nB for scores ≥ 80\\nC for scores ≥ 70\\nD for scores ≥ 60\\nF for scores < 60\\nFor example, if the user enters the grade D, the program prints \"Score is in range [60-70)\". "
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e412291363872f0ba3632",
        "name": "csedpad.19.ExceptionHandling.exceptionhandling_1",
        "items": [
            {
                "item": "664e410a91363872f0ba362a",
                "type": "example",
                "details": {
                    "name": "csedpad.19.ExceptionHandling.exceptionhandling_1",
                    "description": "This program checks that an input for an order is in the correct format, demonstrating how a NumberFormatException can occur."
                }
            },
            {
                "item": "664e411091363872f0ba362c",
                "type": "example",
                "details": {
                    "name": "csedpad.19.ExceptionHandling.exceptionhandling_1",
                    "description": "This program demonstrates how arrays are initalized and how an ArrayIndexOutOfBoundsException can occur."
                }
            },
            {
                "item": "664e411691363872f0ba362e",
                "type": "example",
                "details": {
                    "name": "csedpad.19.ExceptionHandling.exceptionhandling_1",
                    "description": "You wrote a setence about a  fruit that you love. You are trying to find out whether you can find"
                }
            },
            {
                "item": "664e411c91363872f0ba3630",
                "type": "example",
                "details": {
                    "name": "csedpad.19.ExceptionHandling.exceptionhandling_1",
                    "description": "You have an empty string. You are trying to find out whether you can find"
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e410691363872f0ba3625",
        "name": "booleans.three_booleans",
        "items": [
            {
                "item": "664e40fd91363872f0ba361f",
                "type": "example",
                "details": {
                    "name": "Determining When at Least One of the Three Boolean Variables is True",
                    "description": "Construct a program that determines whether at least one of the three boolean variables is true based on the inputs that it receives from the user."
                }
            },
            {
                "item": "664e410091363872f0ba3621",
                "type": "challenge",
                "details": {
                    "name": "Determining When at Least One of the Three Boolean Variables is False",
                    "description": "Construct a program that determines whether at least one of the three boolean variables is false based on the inputs that it receives from the user."
                }
            },
            {
                "item": "664e410391363872f0ba3623",
                "type": "challenge",
                "details": {
                    "name": "Determining When All Three Boolean Variables Are Equal",
                    "description": "Construct a program that receives the value of three boolean variables from the user and determines whether all variables have the same value — either all three true or all three false."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e40f991363872f0ba361b",
        "name": "py_single_linked_list",
        "items": [
            {
                "item": "664e40f491363872f0ba3617",
                "type": "example",
                "details": {
                    "name": "Singly Linked List",
                    "description": "Create the necessary classes for a Singly Linked List, containing the method append(item) to add a new item to the end of the linked list. Test the singly linked list after the classes are created."
                }
            },
            {
                "item": "664e40f691363872f0ba3619",
                "type": "challenge",
                "details": {
                    "name": "Singly Linked List",
                    "description": "Create the necessary classes for a Singly Linked List, containing the method add(item) to add a new item to the beginning of the linked list. Test the singly linked list after the classes are created."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e40ee91363872f0ba3613",
        "name": "csedpad.04.StringClass.no_topic_1",
        "items": [
            {
                "item": "664e40e291363872f0ba360f",
                "type": "example",
                "details": {
                    "name": "csedpad.04.StringClass.no_topic_1",
                    "description": "Given two names of two places, the program checks if they are equal in length."
                }
            },
            {
                "item": "664e40e891363872f0ba3611",
                "type": "example",
                "details": {
                    "name": "csedpad.04.StringClass.no_topic_1",
                    "description": "Given a person name, the program finds out the length, i.e., the number of characters, of the name."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e40df91363872f0ba360a",
        "name": "py_concat_str_num",
        "items": [
            {
                "item": "664e40da91363872f0ba3604",
                "type": "example",
                "details": {
                    "name": "Concatenating Strings and Numbers (Case 1)",
                    "description": "Construct a program that uses variables x, y, and z to print \"Python was invented in 1989.\"."
                }
            },
            {
                "item": "664e40dc91363872f0ba3606",
                "type": "challenge",
                "details": {
                    "name": "Concatenating Strings and Numbers (Case 2)",
                    "description": "Construct a program that uses variables x, y, and z to print \"x * 2 = 4\"."
                }
            },
            {
                "item": "664e40dd91363872f0ba3608",
                "type": "challenge",
                "details": {
                    "name": "Concatenating Strings and Numbers (Case 3)",
                    "description": "Construct a program that uses variables x, y, and z to print \"10 + 20 = 30\"."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e3f0891363872f0ba3600",
        "name": "arithmetic.f_to_c_conversion",
        "items": [
            {
                "item": "664e3f0191363872f0ba35fc",
                "type": "example",
                "details": {
                    "name": "Celsius To Fahrenheit Conversion",
                    "description": "Construct a program that computes the Fahrenheit equivalent of an input Celsius value using the formula F = (9/5)C + 32. The input Celsius value is an integer."
                }
            },
            {
                "item": "664e3f0591363872f0ba35fe",
                "type": "challenge",
                "details": {
                    "name": "Fahrenheit to Celsius Conversion",
                    "description": "Construct a program that computes the Celsius equivalent of an input Fahrenheit value using the formula C = (F - 32) (5/9). The input Fahrenheit value is an integer."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e3efd91363872f0ba35f8",
        "name": "artihmetic.vending_machine",
        "items": [
            {
                "item": "664e3ef591363872f0ba35f4",
                "type": "example",
                "details": {
                    "name": "Vending Machine With Dollars and Quarters",
                    "description": "Suppose we have a vending machine that gives change. A customer selects an item for purchase and inserts a bill into the vending machine. The vending machine dispenses the purchased item and gives change. We will assume that all item prices are multiples of 25 cents, and the machine gives all change in dollar and quarters. Construct a program that computes how many dollars and quarters to return to the customer."
                }
            },
            {
                "item": "664e3ef991363872f0ba35f6",
                "type": "challenge",
                "details": {
                    "name": "Vending Machine With Quarters, Dimes, and Nickels",
                    "description": "Suppose we have a vending machine that gives change. A customer selects an item for purchase and inserts a bill into the vending machine. The vending machine dispenses the purchased item and gives change. We will assume that all item prices are multiples of 5 cents, and the machine gives all change in quarters, dimes, and nickels. Construct a program that computes how many quarters, dimes, and nickels to return to the customer."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e3ee091363872f0ba35f0",
        "name": "arrays2d.j_print_medals",
        "items": [
            {
                "item": "664e3ebc91363872f0ba35ec",
                "type": "example",
                "details": {
                    "name": "Printing Table of Medal Winner Counts with Row Totals",
                    "description": "Assume that we have an array of countries that stores the names of the seven countries that participated in the Skating competitions at the Winter Olympic. We also have a 7x3 matrix that stores the number of medals that these seven countries won. This matrix looks like as follows:\\n{ {1, 0, 1 },\\n { 1, 1, 0 },\\n ...}\\nThe first, second, and third numbers within a row i represent the number of Gold, Silver, and Bronze medals won by the country that is at the index i of the array of countries.\\nConstruct a program that takes this matrix and the array of countries, and prints a table of medal counts with row total that shows the number of Gold, Silver, Bronze, and Total medals for each of the countries that participated in the competition. The output table should look like as follows:\\n    Country    Gold  Silver  Bronze   Total\\n     Canada        1       0       1            2\\n        China        1       1       0            2\\n       ...\\n"
                }
            },
            {
                "item": "664e3ecc91363872f0ba35ee",
                "type": "challenge",
                "details": {
                    "name": "Printing Table of Medal Winner Counts with Row and Column Totals",
                    "description": "Assume that we have an array of countries that stores the names of the seven countries that participated in the Skating competitions at the Winter Olympic. We also have a 7x3 matrix that stores the number of medals that these seven countries won. This matrix looks like as follows:\\n{ {1, 0, 1 },\\n { 1, 1, 0 },\\n ...}\\nThe first, second, and third numbers within a row i represent the number of Gold, Silver, and Bronze medals won by the country that is at the index i of the array of countries.\\nConstruct a program that takes this matrix and the array of countries, and prints a table of medal counts with row and column totals. The column totals are the sum of the gold, silver, and bronze medals won in the competition. The output table should look like as follows:\\n      Country    Gold  Silver  Bronze   Total\\n         Canada        1       0       1          2\\n            China        1       1       0          2\\n           ...\\nColumn Total      4       4       4"
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e3eba91363872f0ba35e8",
        "name": "ifelse.nested_if_min_max",
        "items": [
            {
                "item": "664e3eb491363872f0ba35e4",
                "type": "example",
                "details": {
                    "name": "Determining the Smallest of the Three Integers",
                    "description": "Construct a program that determines the smallest of the three integer values entered by the user."
                }
            },
            {
                "item": "664e3eb791363872f0ba35e6",
                "type": "challenge",
                "details": {
                    "name": "Determining the Largest of the Three Integers",
                    "description": "Construct a program that determines the largest of the three integer values entered by the user."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e3eac91363872f0ba35df",
        "name": "csedpad.12.NestedLoops.nestedloops_1",
        "items": [
            {
                "item": "664e3e9991363872f0ba35d9",
                "type": "example",
                "details": {
                    "name": "csedpad.12.NestedLoops.nestedloops_1",
                    "description": "Generate the multiplication table."
                }
            },
            {
                "item": "664e3e9f91363872f0ba35db",
                "type": "example",
                "details": {
                    "name": "csedpad.12.NestedLoops.nestedloops_1",
                    "description": "Label all squares on a chessboard with numbers from 1 to 64 such that the top row's squares are labeled 1 to 8 from left to right, the row below's square's are labeled 9-16 from left to right, and so on."
                }
            },
            {
                "item": "664e3ea691363872f0ba35dd",
                "type": "example",
                "details": {
                    "name": "csedpad.12.NestedLoops.nestedloops_1",
                    "description": "Print a grid of stars."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e3e9691363872f0ba35d5",
        "name": "ifelse.nested_if_temperature",
        "items": [
            {
                "item": "664e3e9191363872f0ba35d1",
                "type": "example",
                "details": {
                    "name": "Warning the User about the Changes in the Temperature",
                    "description": "Construct a program that receives the temperature for today and yesterday and warns the user when it is getting colder or warmer or neither. The temperature values could have a decimal point."
                }
            },
            {
                "item": "664e3e9391363872f0ba35d3",
                "type": "challenge",
                "details": {
                    "name": "Warning the User about the Changes in the Temperature and Humidity",
                    "description": "Construct a program that receives the temperature and humidity for today and yesterday and warns the user when it is getting colder or warmer or neither. When it is getting warmer, the program should also warn the user about the changes in humidity. In particular, it should warn the user when today's humidity is more, less, or has not changed compared to yesterday's humidity. Note that the temperature and humidity values could have a decimal point."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e3e4191363872f0ba35cc",
        "name": "strings.substring",
        "items": [
            {
                "item": "664e3dc391363872f0ba35c6",
                "type": "example",
                "details": {
                    "name": "Printing Name Initials",
                    "description": "Construct a program that prints the initials of the name \"John Smith\"."
                }
            },
            {
                "item": "664e3ded91363872f0ba35c8",
                "type": "challenge",
                "details": {
                    "name": "Printing Full Name with Middle Initial",
                    "description": "Construct a program that prints the full name with middle initial for the name \"John Phillip Smith\"."
                }
            },
            {
                "item": "664e3e1791363872f0ba35ca",
                "type": "challenge",
                "details": {
                    "name": "Printing Name in APA Style",
                    "description": "Construct a program that prints the name \"Alice Ann Darcy\" following the APA style, i.e., last name first, followed by initials."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e3dc191363872f0ba35c1",
        "name": "csedpad.08.Switch.switchstatements_1",
        "items": [
            {
                "item": "664e3dba91363872f0ba35bb",
                "type": "example",
                "details": {
                    "name": "Course Recommendations by Major and Year of Study",
                    "description": "Prompt an undergraduate engineering student for their major (CSE or ECE) and a year of study (1, 2, 3, or 4), and recommend some appropriate courses they might take during that year of study."
                }
            },
            {
                "item": "664e3dbd91363872f0ba35bd",
                "type": "example",
                "details": {
                    "name": "Numeric Dress Size to Nominal Size Conversion",
                    "description": "Given a user-supplied US dress size (2, 4, 6, etc.), output the corresponding size label (XS, S, M, L, etc.)."
                }
            },
            {
                "item": "664e3dbf91363872f0ba35bf",
                "type": "example",
                "details": {
                    "name": "Letter-Grade Comment Generator",
                    "description": "Prompts a user to enter their letter grade (A+, A, A-, etc.) and provides some words of encouragement based on the grade."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e3d8a91363872f0ba35b7",
        "name": "arrays.j_array_change",
        "items": [
            {
                "item": "664e3d5191363872f0ba35b3",
                "type": "example",
                "details": {
                    "name": "Modifying an Array (Case 1)",
                    "description": "Construct a program that increments all elements of the array by 1."
                }
            },
            {
                "item": "664e3d5a91363872f0ba35b5",
                "type": "challenge",
                "details": {
                    "name": "Modifying an Array (Case 2)",
                    "description": "Construct a program that swaps pairs of adjacent elements of the array. For example, if the array is {1, 2, 3, 4, 5, 6}, the program will change it to {2, 1, 4, 3, 6, 5}.\\nThis program assumes that the array has always an even number of elements."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e3d3491363872f0ba35af",
        "name": "py_work_hours",
        "items": [
            {
                "item": "664e3cf791363872f0ba35ab",
                "type": "example",
                "details": {
                    "name": "Reporting the Total Hours Each Employee Worked (Case 1) ",
                    "description": "Suppose we have an input file that contains information about how many hours each employee of a company has worked. The file looks like the following (Employee's name, Hours):\\nErica 7.5 8.5 10.25 8 8.5\\nErin 10.5 11.5 12 11 10.75\\nSimone 8 8 8\\n...\\nConstruct a program that reads this file and calculates the total number of hours worked by each individual. Make sure that the program handles each specific exception that could occur. "
                }
            },
            {
                "item": "664e3d1591363872f0ba35ad",
                "type": "challenge",
                "details": {
                    "name": "Reporting the Total Hours Each Employee Worked (Case 2) ",
                    "description": "Suppose we have an input file that contains information about how many hours each employee of a company has worked. The file looks like the following (Employee's identification number, Employee's name, Hours):\\n101 Erica 7.5 8.5 10.25 8 8.5\\n783 Erin 10.5 11.5 12 11 10.75\\n114 Simone 8 8 8\\n...\\nConstruct a program that reads this file and calculates the total number of hours worked by each individual. Make sure that the program handles each specific exception that could occur. "
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e3cf391363872f0ba35a8",
        "name": "csedpad.07.IfElse.no_topic",
        "items": [
            {
                "item": "664e3ced91363872f0ba35a6",
                "type": "example",
                "details": {
                    "name": "csedpad.07.IfElse.no_topic",
                    "description": "Find the tallest among three individuals whose heights are given."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e3cd891363872f0ba35a1",
        "name": "arrays.j_array_basic",
        "items": [
            {
                "item": "664e3cb291363872f0ba359b",
                "type": "example",
                "details": {
                    "name": "Updating an Element in the Array (Case 1) ",
                    "description": "Construct a program that initializes an array with three integers, changes the first element in the array, and finally, prints all the array elements."
                }
            },
            {
                "item": "664e3cbf91363872f0ba359d",
                "type": "challenge",
                "details": {
                    "name": "Updating an Element in the Array (Case 2) ",
                    "description": "Construct a program that initializes an array with five floating-point numbers, changes the second element in the array, and finally, prints all the array elements."
                }
            },
            {
                "item": "664e3ccc91363872f0ba359f",
                "type": "challenge",
                "details": {
                    "name": "Updating an Element in the Array (Case 3) ",
                    "description": "Construct a program that initializes an array with four strings, changes the last element in the array, and finally, prints all the array elements."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e3cae91363872f0ba3596",
        "name": "py_find_average",
        "items": [
            {
                "item": "664e3ca791363872f0ba3590",
                "type": "example",
                "details": {
                    "name": "Calculating the Average of Input Integers",
                    "description": "Construct a program that reads a series of integers from the user, sums them up, and calculates their average. The user enters 0 to indicate the end of the input."
                }
            },
            {
                "item": "664e3ca991363872f0ba3592",
                "type": "challenge",
                "details": {
                    "name": "Calculating the Average of the Input Integers that are an Even Number",
                    "description": "Construct a program that reads a series of integer values from the user, sums up the integers that are an even number, and calculate their average. The user enters 0 to indicate the end of the input."
                }
            },
            {
                "item": "664e3cac91363872f0ba3594",
                "type": "challenge",
                "details": {
                    "name": "Calculating the Average of Floating-Point Numbers",
                    "description": "Construct a program that reads a series of non-negative floating-point numbers from the user, sums them up, and calculate their average.\\nNote that you need to think what value should the program use to indicate the end of the input."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e3ca591363872f0ba358b",
        "name": "py_win_percentage",
        "items": [
            {
                "item": "664e3c9f91363872f0ba3585",
                "type": "example",
                "details": {
                    "name": "Calculating the Winning Percentage of a Sports Team (Case 1)",
                    "description": "Construct a program that receives from the user the number of games that a sports team won in a tournament of 12 games and calculates the winning percentage of that sports team. The program must ask for the number of the games won until the user enters a valid number."
                }
            },
            {
                "item": "664e3ca191363872f0ba3587",
                "type": "challenge",
                "details": {
                    "name": "Calculating the Winning Percentage of a Sports Team (Case 2) ",
                    "description": "Construct a program that receives from the user the number of games in a tournament and the number of the games that a sports team won in the tournament, and calculates the winning percentage of that sports team. The program must ask the user for each of the two inputs until the user enters a valid number."
                }
            },
            {
                "item": "664e3ca391363872f0ba3589",
                "type": "challenge",
                "details": {
                    "name": "Calculating the Winning Percentage of a Sports Team (Case 3)",
                    "description": "Construct a program that receives from the user the number of games that a sports team won and tied in a tournament of 12 games and calculates the winning percentage of the sports team, counting ties as half wins. The program must ask the user for each of the two inputs until the user enters a valid number."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e3c9c91363872f0ba3580",
        "name": "while_loops.win_percentage",
        "items": [
            {
                "item": "664e3c9391363872f0ba357a",
                "type": "example",
                "details": {
                    "name": "Calculating the Winning Percentage of a Sports Team (Case 1)",
                    "description": "Construct a program that receives from the user the number of games that a sports team won in a tournament of 12 games and calculates the winning percentage of that sports team. The program must ask for the number of the games won until the user enters a valid number."
                }
            },
            {
                "item": "664e3c9691363872f0ba357c",
                "type": "challenge",
                "details": {
                    "name": "Calculating the Winning Percentage of a Sports Team (Case 2) ",
                    "description": "Construct a program that receives from the user the number of games in a tournament and the number of the games that a sports team won in the tournament, and calculates the winning percentage of that sports team. The program must ask the user for each of the two inputs until the user enters a valid number."
                }
            },
            {
                "item": "664e3c9991363872f0ba357e",
                "type": "challenge",
                "details": {
                    "name": "Calculating the Winning Percentage of a Sports Team (Case 3)",
                    "description": "Construct a program that receives from the user the number of games that a sports team won and tied in a tournament of 12 games and calculates the winning percentage of the sports team, counting ties as half wins. The program must ask the user for each of the two inputs until the user enters a valid number."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e3c9291363872f0ba3576",
        "name": "py_datatype_input_manipulation",
        "items": [
            {
                "item": "664e3c8e91363872f0ba3572",
                "type": "example",
                "details": {
                    "name": "Input Manipulation",
                    "description": "Construct a program that takes a user's inputs and multiplies the inputs.Then print the type of the result, convert the result to float and print its float absolute value. "
                }
            },
            {
                "item": "664e3c9091363872f0ba3574",
                "type": "challenge",
                "details": {
                    "name": "Input Manipulation",
                    "description": "Construct a program that takes a user's inputs and calculate the division of the inputs.Then convert the division result into an integer, check the current division result's type and print the original division result, converted result and the original division result's float absolute value."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e3c8b91363872f0ba356e",
        "name": "py_file_input_stat",
        "items": [
            {
                "item": "664e3c7891363872f0ba356a",
                "type": "example",
                "details": {
                    "name": "Reporting File Information (Case 1) ",
                    "description": " Construct a program that receives the full path to an input file from the user, reads that file and reports the number of lines, the longest line, the number of words on each line, and the length of the longest word on each line. Make sure that the program handles each specific exception that could occur."
                }
            },
            {
                "item": "664e3c8791363872f0ba356c",
                "type": "challenge",
                "details": {
                    "name": "Reporting File Information (Case 2) ",
                    "description": " Construct a program that receives the full path to an input file from the user, reads that file and reports the number of lines, the longest line, the number of words on each line, and the length of the longest word on each line. Make sure that the program handles each specific exception that could occur. Also, the program must ask the user for a valid file path until the user enters a file path that could be accessed without any exception."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e3c7791363872f0ba3566",
        "name": "py_recursion_gcf",
        "items": [
            {
                "item": "664e3c7291363872f0ba3562",
                "type": "example",
                "details": {
                    "name": "Greatest Common Factor",
                    "description": "Construct a program that recursively finds and returns the great common factor between of two integers."
                }
            },
            {
                "item": "664e3c7491363872f0ba3564",
                "type": "challenge",
                "details": {
                    "name": "Greatest Common Factor",
                    "description": "Construct a program that recursively finds and returns the great common factor between of two integers. This is a simple implementation--fill in the missing lines."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e3c6f91363872f0ba355f",
        "name": "csedpad.LogicalOperators.logicaloperator",
        "items": [
            {
                "item": "664e3c6891363872f0ba355d",
                "type": "example",
                "details": {
                    "name": "csedpad.LogicalOperators.logicaloperator",
                    "description": "this program checks whether a year is leap year or not source:"
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e3c6491363872f0ba355a",
        "name": "csedpad.preliminary_topics.variables_expressions_constants",
        "items": [
            {
                "item": "664e3c5e91363872f0ba3558",
                "type": "example",
                "details": {
                    "name": "What is the average speed?",
                    "description": "Construct a program that calculates the average speed in miles per hour using the values stored in variables given and print the height in meters with 2 digits after the decimal point to the console."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e3c5a91363872f0ba3555",
        "name": "arrays.j_array_min_max",
        "items": [
            {
                "item": "664e3c3591363872f0ba3553",
                "type": "example",
                "details": {
                    "name": "Finding the Maximum Value in an Array",
                    "description": "Write a program that finds the maximum value in an array."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e3c3291363872f0ba354f",
        "name": "objects_classes_account",
        "items": [
            {
                "item": "664e3c2a91363872f0ba354b",
                "type": "example",
                "details": {
                    "name": "The Class for Representing a Bank Account (Case 1)",
                    "description": "Construct a class that represents a basic bank account. This class should contain data representing the name of the account’s owner, the account number, and the account’s current balance; all of which could be accessed or changed only through the getter and setter methods. An instance of the class should be created by specifying three parameters that are used to initialize the instance (i.e., object) data. The other methods of this class should perform various services on the account (making deposits, withdrawals, adding interest to the account). These methods should examine the data passed into them to make sure the requested transaction is valid."
                }
            },
            {
                "item": "664e3c3091363872f0ba354d",
                "type": "challenge",
                "details": {
                    "name": "The Class for Representing a Bank Account (Case 2)",
                    "description": "Construct a class that represents a basic bank account. This class should contain data representing the name of the account’s owner, the account number, and the account’s current balance; all of which could be accessed or changed only through the getter and setter methods. An instance of the class should be created by specifying three parameters that are used to initialize the instance (i.e., object) data. The other methods of this class should:\\n - provide a one-line description of the account, and\\n - perform various services on the account (making deposits, withdrawals, adding interest to the account). These methods should examine the data passed into them to make sure the requested transaction is valid."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e3c1c91363872f0ba3547",
        "name": "for_loops.j_for_three",
        "items": [
            {
                "item": "664e3bfe91363872f0ba3543",
                "type": "example",
                "details": {
                    "name": "Printing Sequence of Numbers with a Gap Between Adjacent Values (Case 1) ",
                    "description": "Construct a program that prints a sequence of numbers from 1 (inclusive) to 16 (exclusive) in increments of 4."
                }
            },
            {
                "item": "664e3c0d91363872f0ba3545",
                "type": "challenge",
                "details": {
                    "name": "Printing Sequence of Numbers with a Gap Between Adjacent Values (Case 2) ",
                    "description": "Construct a program that prints a sequence of numbers from 7 (inclusive) to 35 (inclusive) in increments of 7."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e2fea91363872f0ba3538",
        "name": "py_three_booleans",
        "items": [
            {
                "item": "664e2fe691363872f0ba3532",
                "type": "example",
                "details": {
                    "name": "Determining When at Least One of the Three Boolean Variables is True",
                    "description": "Construct a program that determines whether at least one of the three boolean variables is True based on the inputs that it receives from the user."
                }
            },
            {
                "item": "664e2fe791363872f0ba3534",
                "type": "challenge",
                "details": {
                    "name": "Determining When at Least One of the Three Boolean Variables is False",
                    "description": "Construct a program that determines whether at least one of the three boolean variables is False based on the inputs that it receives from the user."
                }
            },
            {
                "item": "664e2fe991363872f0ba3536",
                "type": "challenge",
                "details": {
                    "name": "Determining When All Three Boolean Variables Are Equal",
                    "description": "Construct a program that receives the value of three boolean variables from the user and determines whether all variables have the same value, either all three True or all three False."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e2fe291363872f0ba352f",
        "name": "csedpad.01.preliminary_topics.preliminarytopics(constants)_1",
        "items": [
            {
                "item": "664e2fdc91363872f0ba352d",
                "type": "example",
                "details": {
                    "name": "csedpad.01.preliminary_topics.preliminarytopics(constants)_1",
                    "description": "Your system doesn't have a set value mathematical constant for Pi. Assign a value of Pi in your system and make sure it remains set."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e2fcf91363872f0ba3529",
        "name": "arrays.j_array_process_elements",
        "items": [
            {
                "item": "664e2fb191363872f0ba3525",
                "type": "example",
                "details": {
                    "name": "Calculating the Sum of the Values in an Array",
                    "description": "Construct a program that computes the sum of all the values in an array."
                }
            },
            {
                "item": "664e2fc391363872f0ba3527",
                "type": "challenge",
                "details": {
                    "name": "Calculating the Average of the Values in the Array",
                    "description": "Construct a program that calculates the average of all the values in an array. The program should handle arrays with arbitrary number of values (including an empty array)."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e2fad91363872f0ba3522",
        "name": "csedpad.21.Sorting.no_topic",
        "items": [
            {
                "item": "664e2fa791363872f0ba3520",
                "type": "example",
                "details": {
                    "name": "csedpad.21.Sorting.no_topic",
                    "description": "Given a list of unsorted game cards, sort them in ascending order using the insertion sort algorithm."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e2fa591363872f0ba351c",
        "name": "py_range_two",
        "items": [
            {
                "item": "664e2fa291363872f0ba3518",
                "type": "example",
                "details": {
                    "name": "Printing Consecutive Numbers Within a Specified Range (Case 1) ",
                    "description": "Construct a program that prints a sequence of numbers from 1 (inclusive) to 9 (inclusive)."
                }
            },
            {
                "item": "664e2fa491363872f0ba351a",
                "type": "challenge",
                "details": {
                    "name": "Printing Consecutive Numbers Within a Specified Range (Case 2) ",
                    "description": "Construct a program that prints a sequence of numbers from 8 (inclusive) to 14 (inclusive)."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e2f5f91363872f0ba3514",
        "name": "strings.equals",
        "items": [
            {
                "item": "664e2f0e91363872f0ba3510",
                "type": "example",
                "details": {
                    "name": "String Comparison (Case 1)",
                    "description": "Construct the program that first checks the equality of the strings \"HELLO WORLD!\" and \"hello world!\" and then modifies the string \"HELLO WORLD!\" so that it matches the string \"Hello Dave!\"."
                }
            },
            {
                "item": "664e2f1d91363872f0ba3512",
                "type": "challenge",
                "details": {
                    "name": "String Comparison (Case 2)",
                    "description": "Construct the program that modifies the string \"hexxo worxd!\" so that it matches (ignoring case) the string \"HELLO WORLD!\"."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e2f0891363872f0ba350b",
        "name": "csedpad.11.ForLoops.no_topic_1",
        "items": [
            {
                "item": "664e2efa91363872f0ba3505",
                "type": "example",
                "details": {
                    "name": "csedpad.11.ForLoops.no_topic_1",
                    "description": "this is a program for a countdown display for launching a rocket in space which must show numbers in decreasing order from 10 to 1."
                }
            },
            {
                "item": "664e2f0091363872f0ba3507",
                "type": "example",
                "details": {
                    "name": "csedpad.11.ForLoops.no_topic_1",
                    "description": "50 chickens are separated in odd-numbered and even-numbered cages with the first chicken being in cage 1 and the last chicken in cage 50. Each cage's number indicates the number of eggs that the chicken lays such that chicken in cage n lays n eggs. How many eggs can be collected from all the chickens in the odd-numbered cages? This program computes that"
                }
            },
            {
                "item": "664e2f0291363872f0ba3509",
                "type": "example",
                "details": {
                    "name": "csedpad.11.ForLoops.no_topic_1",
                    "description": "This program checks whether a number is a prime number or not and displays the result."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e2ef791363872f0ba3500",
        "name": "booleans.rent_car",
        "items": [
            {
                "item": "664e2eef91363872f0ba34fa",
                "type": "example",
                "details": {
                    "name": "Determining When a Customer Could Rent a Car (Case 1)",
                    "description": "Construct a program that determines whether a customer could rent a car based on the inputs that it receives from the car rental agent. Rental cars are available to licensed drivers of 21 years of age or over."
                }
            },
            {
                "item": "664e2ef291363872f0ba34fc",
                "type": "challenge",
                "details": {
                    "name": "Determining When a Customer Could Rent a Car (Case 2)",
                    "description": "Construct a program that determines whether a customer could rent a car based on the inputs that it receives from the car rental agent. Rental cars are available to licensed drivers of 21 years of age or over who have not had a car accident."
                }
            },
            {
                "item": "664e2ef491363872f0ba34fe",
                "type": "challenge",
                "details": {
                    "name": "Determining When a Customer Could Rent a Car (Case 3)",
                    "description": "Construct a program that determines whether a customer could rent a car based on the inputs that it receives from the car rental agent. Rental cars are available to licensed drivers who are either at least 21 years old or have a credit card with $10,000 or more of credit."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e2eee91363872f0ba34f6",
        "name": "py_range_three",
        "items": [
            {
                "item": "664e2eeb91363872f0ba34f2",
                "type": "example",
                "details": {
                    "name": "Printing Sequence of Numbers with a Gap Between Adjacent Values (Case 1) ",
                    "description": "Construct a program that prints a sequence of numbers from 1 (inclusive) to 16 (exclusive) in increments of 4."
                }
            },
            {
                "item": "664e2eec91363872f0ba34f4",
                "type": "challenge",
                "details": {
                    "name": "Printing Sequence of Numbers with a Gap Between Adjacent Values (Case 2) ",
                    "description": "Construct a program that prints a sequence of numbers from 7 (inclusive) to 35 (inclusive) in increments of 7."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e2ea991363872f0ba34ee",
        "name": "strings.addition",
        "items": [
            {
                "item": "664e2e4f91363872f0ba34ea",
                "type": "example",
                "details": {
                    "name": "String Concatenation (Case 1)",
                    "description": "Construct a program that prints the text \"24 and 45 concatenated: 2445\" and \"24 and 45 added: 69\"."
                }
            },
            {
                "item": "664e2e6691363872f0ba34ec",
                "type": "challenge",
                "details": {
                    "name": "String Concatenation (Case 2)",
                    "description": "Construct a program that prints the text \"333\", \"63\", and \"36\"."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e2e4d91363872f0ba34e6",
        "name": "py_if_else_grade",
        "items": [
            {
                "item": "664e2e4a91363872f0ba34e2",
                "type": "example",
                "details": {
                    "name": "Determining the Letter Grade Of a Student",
                    "description": "Construct a program that receives a score from the user and determines the grade as follows:\\nA for scores ≥ 90\\nB for scores ≥ 80\\nC for scores ≥ 70\\nD for scores ≥ 60\\nF for scores < 60\\n"
                }
            },
            {
                "item": "664e2e4c91363872f0ba34e4",
                "type": "challenge",
                "details": {
                    "name": "Converting the Letter Grade of a Student to It's Numeric Range",
                    "description": "Construct a program that receives a grade from the user and prints the numeric range for that grade using the following grading rules:\\nA for scores ≥ 90\\nB for scores ≥ 80\\nC for scores ≥ 70\\nD for scores ≥ 60\\nF for scores < 60\\nFor example, if the user enters the grade D, the program prints \"Score is in range [60-70)\". "
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e2e4891363872f0ba34de",
        "name": "py_if_else_num",
        "items": [
            {
                "item": "664e2e4591363872f0ba34da",
                "type": "example",
                "details": {
                    "name": "Determining the Sign of an Integer",
                    "description": "Construct a program that determines whether an integer is positive, negative, or zero."
                }
            },
            {
                "item": "664e2e4691363872f0ba34dc",
                "type": "challenge",
                "details": {
                    "name": "Determining Whether an Integer is Even or Odd",
                    "description": "Construct a program that determines whether an integer is even or odd."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e2e4391363872f0ba34d6",
        "name": "py_str_repeat_chars",
        "items": [
            {
                "item": "664e2e3f91363872f0ba34d2",
                "type": "example",
                "details": {
                    "name": "Repeating Characters of a String (Case 1)",
                    "description": "Construct a program that has a function that receives a string and creates a new string that has each character of the given string repeated two times.\\nFor example, the new string that will be formed from the string 'abc' is 'aabbcc'."
                }
            },
            {
                "item": "664e2e4191363872f0ba34d4",
                "type": "challenge",
                "details": {
                    "name": "Repeating Characters of a String (Case 2)",
                    "description": "Construct a program that has a function that receives a string and creates a new string that has every other character of the given string, starting with the first character, repeated two times.\\nFor example, the new string that will be formed from the string 'abcde' is 'aaccee'."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e2e3791363872f0ba34cd",
        "name": "csedpad.14.TwoDimensionalArrays.no_topic_1",
        "items": [
            {
                "item": "664e2e2391363872f0ba34c7",
                "type": "example",
                "details": {
                    "name": "csedpad.14.TwoDimensionalArrays.no_topic_1",
                    "description": "this program calculates the total cost of different items by multiplying unit cost of an item with count of items"
                }
            },
            {
                "item": "664e2e2a91363872f0ba34c9",
                "type": "example",
                "details": {
                    "name": "csedpad.14.TwoDimensionalArrays.no_topic_1",
                    "description": "This program generates a tictac toe board by using a two dimensional array."
                }
            },
            {
                "item": "664e2e3091363872f0ba34cb",
                "type": "example",
                "details": {
                    "name": "csedpad.14.TwoDimensionalArrays.no_topic_1",
                    "description": "This program stores the ratings for 4 different movies and finds the average rating for the third  movie."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e2e0a91363872f0ba34c2",
        "name": "artithmetic.inc_dec_operators",
        "items": [
            {
                "item": "664e2de591363872f0ba34bc",
                "type": "example",
                "details": {
                    "name": "Increment/Decrement Operators (Case 1)",
                    "description": "Construct a program that performs increment/decrement operations on variable a (with initial value of 4) and variable b (with initial value of 5) and prints the following output as the result of these operations:\\n-1\\n3"
                }
            },
            {
                "item": "664e2ded91363872f0ba34be",
                "type": "challenge",
                "details": {
                    "name": "Increment/Decrement Operators (Case 2)",
                    "description": "Construct a program that performs increment/decrement operations on variable a (with initial value of 8) and variable b (with initial value of 3) and prints the following output as the result of these operations:\\n10\\n12"
                }
            },
            {
                "item": "664e2dfc91363872f0ba34c0",
                "type": "challenge",
                "details": {
                    "name": "Increment/Decrement Operators (Case 3)",
                    "description": "Construct a program that performs increment/decrement operations on variable a (with initial value of 6) and variable b (with initial value of 1) and prints the following output as the result of these operations:\\n5\\n7"
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e2de091363872f0ba34b8",
        "name": "arrays.j_array_fill",
        "items": [
            {
                "item": "664e2dd191363872f0ba34b4",
                "type": "example",
                "details": {
                    "name": "Creating an Array of Odd Numbers",
                    "description": "Construct a program that creates an array of first ten positive odd numbers."
                }
            },
            {
                "item": "664e2dde91363872f0ba34b6",
                "type": "challenge",
                "details": {
                    "name": "Creating an Array of User Inputs",
                    "description": "Construct a program that creates an array of eight string values received from the user."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e2dc591363872f0ba34b0",
        "name": "arraylist.vocabulary",
        "items": [
            {
                "item": "664e2d8b91363872f0ba34ac",
                "type": "example",
                "details": {
                    "name": "Creating a List of Words from a File ",
                    "description": "Construct a program that reads a text file and creates a list of the words that the file contains, ignoring the case of the letters. Assume that all of the words in the text file are separated by a single space characters."
                }
            },
            {
                "item": "664e2dba91363872f0ba34ae",
                "type": "challenge",
                "details": {
                    "name": "Comparing the List of Words from Two Files",
                    "description": "Construct a program that reads two text files and creates a list of the words that each of these files contains, ignoring the case of the letters. The program should determine which list is larger in size, i.e., which list has more words.\\nAssume that all of the words in these text files are separated by a single space characters."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e2d8991363872f0ba34a8",
        "name": "py_sorting_insertion_sort",
        "items": [
            {
                "item": "664e2d8691363872f0ba34a4",
                "type": "example",
                "details": {
                    "name": "Insertion Sort",
                    "description": "Insertion sort works similarly to how one would sort a hand of cards: by choosing an element and searching through the rest of the array to determine its proper place. Construct a function that performs insertion sort in ascending order on the given list. "
                }
            },
            {
                "item": "664e2d8791363872f0ba34a6",
                "type": "challenge",
                "details": {
                    "name": "Insertion Sort",
                    "description": "Insertion sort works similarly to how one would sort a hand of cards: by choosing an element and searching through the rest of the array to determine its proper place. Construct a function that performs insertion sort in descending order on the given list."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e2d8291363872f0ba34a1",
        "name": "csedpad.04.StringClass.strings_1",
        "items": [
            {
                "item": "664e2d7c91363872f0ba349f",
                "type": "example",
                "details": {
                    "name": "csedpad.04.StringClass.strings_1",
                    "description": "Given a first name and last name of a person, the program concatenates them to form a full name."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e2d7391363872f0ba3499",
        "name": "py_list_rotate",
        "items": [
            {
                "item": "664e2d6691363872f0ba3491",
                "type": "example",
                "details": {
                    "name": "Rotating the List Values to the Left by One Position",
                    "description": "Construct a program that has a function that receives a list of values and returns the list rotated to the left by 1 position so that the value at the front of the list goes to the back and the order of the other values stays the same. For example, if the list is [1, 2, 3, 4, 5, 6], the program will change it to [2, 3, 4, 5, 6, 1]."
                }
            },
            {
                "item": "664e2d6891363872f0ba3493",
                "type": "challenge",
                "details": {
                    "name": "Rotating the List Values to the Left by Two Position",
                    "description": "Construct a program that has a function that receives a list of values and returns the list rotated to the left by 2 position so that the value at the front of the list goes to the second last position, the second value of the list goes to the back, and the order of the other values stays the same. For example, if the list is [1, 2, 3, 4, 5, 6], the program will change it to [3, 4, 5, 6, 1, 2]."
                }
            },
            {
                "item": "664e2d6f91363872f0ba3495",
                "type": "challenge",
                "details": {
                    "name": "Rotating the List Values to the Right by One Position",
                    "description": "Construct a program that has a function that receives a list of values and returns the list rotated to the right by one position so that the value that is currently at the end of the list is moved to the front, shifting the remaining values to the right. For example, if the list is [1, 2, 3, 4, 5, 6], the program will change it to [6, 1, 2, 3, 4, 5]."
                }
            },
            {
                "item": "664e2d7191363872f0ba3497",
                "type": "challenge",
                "details": {
                    "name": "Rotating the List Values to the Right by Two Position",
                    "description": "Construct a program that has a function that receives a list of values and returns the list rotated to the right by 2 position so that the value that is currently at the end of the list is moved to the second position, the second last value of the list is moved to the front of the list, and the remaining values are shifted to the right. For example, if the list is [1, 2, 3, 4, 5, 6], the program will change it to [5, 6, 1, 2, 3, 4]."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e2d6491363872f0ba348e",
        "name": "csedpad.17.ClassesObjects.ClassExample3.classesandobjects_1",
        "items": [
            {
                "item": "664e2d6291363872f0ba348c",
                "type": "example",
                "details": {
                    "name": "csedpad.17.ClassesObjects.ClassExample3.classesandobjects_1",
                    "description": "This program is about creating a class named Courses with static and instance method that prints out the ways to get the groceries"
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e2d6191363872f0ba3487",
        "name": "py_list_basic",
        "items": [
            {
                "item": "664e2d5d91363872f0ba3481",
                "type": "example",
                "details": {
                    "name": "Updating an Element in the List (Case 1) ",
                    "description": "Construct a program that initializes a list with three values, changes the first element in the list, and finally, prints the list."
                }
            },
            {
                "item": "664e2d5e91363872f0ba3483",
                "type": "challenge",
                "details": {
                    "name": "Updating an Element in the List (Case 2) ",
                    "description": "Construct a program that initializes a list with five floating-point numbers, changes the second element in the list, and finally, prints the list."
                }
            },
            {
                "item": "664e2d5f91363872f0ba3485",
                "type": "challenge",
                "details": {
                    "name": "Updating an Element in the List (Case 3) ",
                    "description": "Construct a program that initializes a list with four string values, changes the last element in the list, and finally, prints the list."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e2d5b91363872f0ba347d",
        "name": "objects_classes_point",
        "items": [
            {
                "item": "664e2d5591363872f0ba3479",
                "type": "example",
                "details": {
                    "name": "The Class for Representing a Point in the Euclidean Plane (Case 1)",
                    "description": "Construct a class that represents a point in the Euclidean plane. The class should contain data that represents the point’s integer coordinates (x,y). The point's coordinates could be accessed or changed only through the getter and setter methods. The class should also include a method to translate the point, i.e., shift the point's location by the specified amount."
                }
            },
            {
                "item": "664e2d5991363872f0ba347b",
                "type": "challenge",
                "details": {
                    "name": "The Class for Representing a Point in the Euclidean Plane (Case 2)",
                    "description": "Construct a class that represents a point in the Euclidean plane. The class should contain data that represents the point’s integer coordinates (x,y). The point's coordinates could be accessed or changed only through the getter and setter methods. The class should also include a method to calculate and return the point's distance from the origin (0,0)."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e2d5191363872f0ba3476",
        "name": "csedpad.MathClass.mathclass",
        "items": [
            {
                "item": "664e2d4b91363872f0ba3474",
                "type": "example",
                "details": {
                    "name": "csedpad.MathClass.mathclass",
                    "description": "Demonisterate the understanding of Math class concepts by construct a program that finds the length of the hypotenuse in of a right triangle by using the Pythagoras theorem then finds the angles of that triangle."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e2c8f91363872f0ba3470",
        "name": "py_search_multiple_elements",
        "items": [
            {
                "item": "664e2c8c91363872f0ba346c",
                "type": "example",
                "details": {
                    "name": "Multiple elements",
                    "description": "It is possible to search through an array for multiple elements. In this case, we want to traverse an array and return all elements that are integers. Construct a function that searches through a given array and returns all values that are integers. "
                }
            },
            {
                "item": "664e2c8d91363872f0ba346e",
                "type": "challenge",
                "details": {
                    "name": "Multiple elements",
                    "description": "It is possible to search through an array for multiple elements. In this case, we want to traverse an array and print all elements that are integers and less than 3, and return all elements that are integers and greater than or equal to 3 in a list. Construct a function that searches through a given array and returns all such values. "
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e2c8b91363872f0ba3468",
        "name": "py_star_patterns",
        "items": [
            {
                "item": "664e2c8891363872f0ba3464",
                "type": "example",
                "details": {
                    "name": "Printing A Right Triangle Star Pattern",
                    "description": "A Right triangle star pattern contains N asterisks in N-th row. Construct a program that receives the number of rows in the right triangle star pattern and prints that triangle. For example, when the number of rows in the right triangle star pattern is 5, the program prints the following output:\\n*\\n**\\n***\\n****\\n*****"
                }
            },
            {
                "item": "664e2c8991363872f0ba3466",
                "type": "challenge",
                "details": {
                    "name": "Printing an Inverted Right Triangle Star Pattern",
                    "description": "An inverted right triangle star pattern of N rows contains N-i+1 asterisks in the i-th row. Construct a program that receives the number of rows in the inverted right triangle star pattern and prints that triangle. For example, when the number of rows in the inverted right triangle star pattern is 5, the program prints the following output:\\n*****\\n****\\n***\\n**\\n*"
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e2c8691363872f0ba3461",
        "name": "csedpad.20.Recursion.recursion",
        "items": [
            {
                "item": "664e2c8591363872f0ba345f",
                "type": "example",
                "details": {
                    "name": "csedpad.20.Recursion.recursion",
                    "description": "This program checks whether a string is palindrome or not (meaning the second half of the string is the reverse of the first half)."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e2c8391363872f0ba345b",
        "name": "py_references_passing_values",
        "items": [
            {
                "item": "664e2c8091363872f0ba3457",
                "type": "example",
                "details": {
                    "name": "Passing Values",
                    "description": "Construct a function that increases the original integer's value by 1 and return the increased value's memory address."
                }
            },
            {
                "item": "664e2c8191363872f0ba3459",
                "type": "challenge",
                "details": {
                    "name": "Passing Values",
                    "description": "Construct a program that convert Celsius to Fahrenheit."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e2c7e91363872f0ba3454",
        "name": "csedpad.22.Searching.searching(linearsearch)",
        "items": [
            {
                "item": "664e2c7c91363872f0ba3452",
                "type": "example",
                "details": {
                    "name": "csedpad.22.Searching.searching(linearsearch)",
                    "description": "This program implements Linear Search Algorithm to take the size of the array and then if a user inputs lets say \"6\" then ask to input 6 random integers and shuffles the elements of the array and then ask for the number what the user want to search in that array then returns the index of the array (which has been shuffled) if it is found as it must the integer value that the user have entered."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e2c6d91363872f0ba344e",
        "name": "py_list_process_elements",
        "items": [
            {
                "item": "664e2c5791363872f0ba344a",
                "type": "example",
                "details": {
                    "name": "Calculating the Sum of the Values in the List",
                    "description": "Construct a program that has a function that receives a list and calculates the sum of the values in that list."
                }
            },
            {
                "item": "664e2c5c91363872f0ba344c",
                "type": "challenge",
                "details": {
                    "name": "Calculating the Average of the Values in the List",
                    "description": "Construct a program that has a function that receives a list and calculates the average of the values in that list. The program should handle lists with arbitrary number of values (including an empty list)."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e2c5691363872f0ba3446",
        "name": "py_repeated_sequence",
        "items": [
            {
                "item": "664e2c5391363872f0ba3442",
                "type": "example",
                "details": {
                    "name": "Printing A Sequence of Repeated Numbers (Case 1) ",
                    "description": "Construct a program that receives an integer N from the user and prints a sequence of space-separated numbers from 1 to N such that each number in the sequence is repeated 5 times."
                }
            },
            {
                "item": "664e2c5591363872f0ba3444",
                "type": "challenge",
                "details": {
                    "name": "Printing A Sequence of Repeated Numbers (Case 2) ",
                    "description": "Construct a program that receives an integer N from the user and prints a sequence of space-separated numbers from 1 to N such that the N-th number in the sequence is repeated N times."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e2c4f91363872f0ba343f",
        "name": "csedpad.06.If.if",
        "items": [
            {
                "item": "664e2c4991363872f0ba343d",
                "type": "example",
                "details": {
                    "name": "csedpad.06.If.if",
                    "description": "Given height of two players, this program finds if one player is taller than other or not."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e2c3291363872f0ba3439",
        "name": "objects.classes.loan",
        "items": [
            {
                "item": "664e2c1691363872f0ba3435",
                "type": "example",
                "details": {
                    "name": "The Class for Representing a Loan (Case 1)",
                    "description": "Construct a class that represents a loan. This class should contain data representing the interest rate, loan amount, and the length of loan period (in years). The class should have constructors that permits a loan to be created when:\\n - annual interest rate, length of loan period, and loan amount are specified\\n - none of the properties of the loan are specified. In this, we create a loan with default values for the loan properties (3 % interest rate, 1-year loan period, and 1000 loan amount).\\nThe other method of the this class should calculate the amount of monthly payments on the loan.\\n\\nThe LoanTester1 class instantiates an object from this class and invokes its method to determine the amount of monthly payments on the loan."
                }
            },
            {
                "item": "664e2c1a91363872f0ba3437",
                "type": "challenge",
                "details": {
                    "name": "The Class for Representing a Loan (Case 2)",
                    "description": "Construct a class that represents a loan. This class should contain data representing the interest rate, loan amount, and the length of loan period (in years). The class should have constructors that permits a loan to be created when:\\n - annual interest rate, length of loan period, and loan amount are specified\\n - none of the properties of the loan are specified. In this, we create a loan with default values for the loan properties (3 % interest rate, 1-year loan period, and 1000 loan amount).\\nThe other methods of the this class should calculate the amount of monthly payments on the loan as well as the total payment.\\n\\nThe LoanTester2 class instantiates an object from this class and invokes its method to determine the amount of monthly payments on the loan and the total payment."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e2c1291363872f0ba3432",
        "name": "csedpad.11.ForLoops.no_topic",
        "items": [
            {
                "item": "664e2c0c91363872f0ba3430",
                "type": "example",
                "details": {
                    "name": "csedpad.11.ForLoops.no_topic",
                    "description": "This program displays the multiplication table of 6."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e2ac891363872f0ba3429",
        "name": "csedpad.04.StringClass.no_topic",
        "items": [
            {
                "item": "664e2ac691363872f0ba3427",
                "type": "example",
                "details": {
                    "name": "FirstThreeChars.java",
                    "description": null
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e2ac291363872f0ba3424",
        "name": "csedpad.04.StringClass.strings",
        "items": [
            {
                "item": "664e2abc91363872f0ba3422",
                "type": "example",
                "details": {
                    "name": "csedpad.04.StringClass.strings",
                    "description": "Given a person name, this program converts the name into uppercase and lowercase."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e2ab591363872f0ba341e",
        "name": "py_check_product_code",
        "items": [
            {
                "item": "664e2a9091363872f0ba341a",
                "type": "example",
                "details": {
                    "name": "Counting the Number of Valid and Banned Product Codes (Case 1) ",
                    "description": "Suppose a hypothetical company uses codes to represent its various products. A product code includes, among other information, a character in the tenth position that represents the zone from which that product was made. Due to some reorganization, products from zone R are banned from being sold.\\nConstruct a program that reads product codes from the user and counts the number of valid and banned codes entered. Make sure that the program handles all possible exceptions.\\nThe program must ask the user for an input until the user enters STOP."
                }
            },
            {
                "item": "664e2aad91363872f0ba341c",
                "type": "challenge",
                "details": {
                    "name": "Counting the Number of Valid and Banned Product Codes (Case 2) ",
                    "description": "Suppose a hypothetical company uses codes to represent its various products. A product code includes, among other information, a character in the tenth position that represents the zone from which that product was made, and a four-digit integer representing the district in which it will be sold. This four-digit integer begins at the 4th character and extends to the 7th character in the input code (inclusive). Due to some reorganization, products from zone R are banned from being sold in districts with a designation of 2000 or higher.\\nConstruct a program that reads product codes from the user and counts the number of valid and banned codes entered. Make sure that the program handles all possible exceptions.\\nThe program must ask the user for an input until the user enters STOP."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e2a8c91363872f0ba3417",
        "name": "csedpad.03.MathClass.mathclass",
        "items": [
            {
                "item": "664e2a8691363872f0ba3415",
                "type": "example",
                "details": {
                    "name": "csedpad.03.MathClass.mathclass",
                    "description": "Demonstrate understanding of Math class concepts by constructing a program that finds the length of the hypotenuse in of a right triangle by using the Pythagoras theorem. Then this program finds the angles of that triangle."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e2a6091363872f0ba3411",
        "name": "objects.classes.tv",
        "items": [
            {
                "item": "664e2a1591363872f0ba340d",
                "type": "example",
                "details": {
                    "name": "The Class for Representing a TV (Case 1)",
                    "description": "Construct a class that represents a TV. The class should contain data that represents the TV's state (power on or off, current channel). The class should include methods to access the state of the TV and also methods to change the state of the TV (turn on/off, change channels). Assume that the valid channel range is from 1 to 120 (both inclusive). \\n\\nThe class TVTester1 instantiates two objects from this class and invokes the methods on those objects to turn on the TV and change the channel."
                }
            },
            {
                "item": "664e2a3b91363872f0ba340f",
                "type": "challenge",
                "details": {
                    "name": "The Class for Representing a TV (Case 2)",
                    "description": "Construct a class that represents a TV. The class should contain data that represents the TV's state (power on or off, current volume level). The class should include methods to access the state of the TV and also methods to change the state of the TV (turn on/off, change volume level). Assume that the volume level is an integer and ranges from 1 to 7 (both inclusive). \\n\\nThe class TVTester2 instantiates two objects from this class and invokes the methods on those objects to turn on the TV and change the volume level."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e2a1491363872f0ba340a",
        "name": "csedpad.01.preliminary_topics.preliminarytopics(constants)",
        "items": [
            {
                "item": "664e2a1291363872f0ba3408",
                "type": "example",
                "details": {
                    "name": "csedpad.01.preliminary_topics.preliminarytopics(constants)",
                    "description": "As a class assignment, calculate the area of a circle given its radius."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e2a0891363872f0ba3404",
        "name": "objects.classes.account",
        "items": [
            {
                "item": "664e297191363872f0ba3400",
                "type": "example",
                "details": {
                    "name": "The Class for Representing a Bank Account (Case 1)",
                    "description": "Construct a class that represents a basic bank account. This class should contain data representing the name of the account’s owner, the account number, and the account’s current balance. The interest rate for the account is stored as a constant. The constructor of the class should accept three parameters that are used to initialize the instance (i.e., object) data when an object is instantiated from this class. The other methods of this class should perform various services on the account (making deposits, withdrawals, adding interest to the account). These methods should examine the data passed into them to make sure the requested transaction is valid.\\n\\nThe Transactions1 class creates some bank accounts and requests various services."
                }
            },
            {
                "item": "664e29ff91363872f0ba3402",
                "type": "challenge",
                "details": {
                    "name": "The Class for Representing a Bank Account (Case 2)",
                    "description": "Construct a class that represents a basic bank account. This class should contain data representing the name of the account’s owner, the account number, and the account’s current balance. The interest rate for the account is stored as a constant. The class should have constructors that permits an account to be opened when:\\n - the account name, account number, and initial balance are specified\\n - only the account name and the account number are specified. In this case, initial balance is assumed to be zero.\\nThe other methods of this class should perform various services on the account (making deposits, withdrawals, adding interest to the account). These methods should examine the data passed into them to make sure the requested transaction is valid.\\n\\nThe Transactions2 class creates some bank accounts and requests various services."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e296f91363872f0ba33fc",
        "name": "py_linkedlist_searching",
        "items": [
            {
                "item": "664e296c91363872f0ba33f8",
                "type": "example",
                "details": {
                    "name": "Search in the linked list.",
                    "description": "When using a LinkedList, it is possible that you may want to search through the list to see if a specific value is in it. To do so, each node must be checked individually. Construct a search function within the LinkedList class that traverses through all nodes in the list and returns True if a given target value is within the list."
                }
            },
            {
                "item": "664e296d91363872f0ba33fa",
                "type": "challenge",
                "details": {
                    "name": "Search in the linked list.",
                    "description": "When using a LinkedList, it is possible that you may want to search through the list to see if a specific value is in it. To do so, each node must be checked individually. Construct a search function within the LinkedList class that traverses through all nodes in the list and keeps track of all instances of the target value (if any) are in the LinkedList, returning the final count at the end of the search."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e296891363872f0ba33f5",
        "name": "csedpad.16.Methods.methods",
        "items": [
            {
                "item": "664e296191363872f0ba33f3",
                "type": "example",
                "details": {
                    "name": "csedpad.16.Methods.methods",
                    "description": "Calculate and display different measurements regarding the shape of the sun, the earth, and the moon, including the circumference, the surface area, and the volume of each."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e292791363872f0ba33ed",
        "name": "py_references_passing_lists",
        "items": [
            {
                "item": "664e292491363872f0ba33e9",
                "type": "example",
                "details": {
                    "name": "Passing Lists",
                    "description": "Construct a function that calculate square values of the list’s elements."
                }
            },
            {
                "item": "664e292591363872f0ba33eb",
                "type": "challenge",
                "details": {
                    "name": "Passing Lists",
                    "description": "Construct a program that convert Celsius temperature values in a list to Fahrenheit temperature values"
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e284a91363872f0ba33dd",
        "name": "user_study",
        "items": [
            {
                "item": "664e274c91363872f0ba33c9",
                "type": "example",
                "details": {
                    "name": "Printing Consecutive Numbers Starting from Zero (Case 1) ",
                    "description": "Construct a program that prints a sequence of numbers from 0 (inclusive) to 10 (exclusive)."
                }
            },
            {
                "item": "664e275b91363872f0ba33cb",
                "type": "challenge",
                "details": {
                    "name": "Determining When a Student Fails a Course",
                    "description": "Construct a program that determines whether a student fails the course based on the inputs that we receive from the user. The student fails the course if the exam score is less than 55 or student has more than 2 missing homework."
                }
            },
            {
                "item": "664e275d91363872f0ba33cd",
                "type": "challenge",
                "details": {
                    "name": "Determining whether the result of multiplication is forbidden",
                    "description": "Construct a program that multiplies the two integers that the user enters. However, multiplication results that are less than 0 or above 10, are forbidden, so in that case, the multiplication result should be 10."
                }
            },
            {
                "item": "664e276191363872f0ba33cf",
                "type": "challenge",
                "details": {
                    "name": "Calculating the Employee's Wage Based on the Hours That the Employee Has Worked and an Hourly Pay Rate",
                    "description": "Construct a program for the payment department of a company to calculate the wage of an employee based on the number of hours that the employee has worked. If an employee works over 40 hours in a week, the payment amount should take into account the overtime hours. The overtime hours are paid at a rate one and a half times the regular pay rate."
                }
            },
            {
                "item": "664e276491363872f0ba33d1",
                "type": "challenge",
                "details": {
                    "name": "Determining the Sign of an Integer",
                    "description": "Construct a program that determines whether an integer is positive, negative, or zero."
                }
            },
            {
                "item": "664e276691363872f0ba33d3",
                "type": "challenge",
                "details": {
                    "name": "Calculating the Growth of the Balance Over a Period of Years ",
                    "description": "Assume that you want to invest your money by putting it in a bank account that earns a certain percent interest at the end of each year. Assume that the interest is compound, meaning that the amount of interest earned in each year becomes part of the balance for the next year's interest calculation.\\nConstruct a program that calculates the balance you will earn over the period of 10 years."
                }
            },
            {
                "item": "664e283791363872f0ba33d5",
                "type": "challenge",
                "details": {
                    "name": "Printing Numbers in Descending Order ",
                    "description": "Construct a program that accepts a positive integer N and then prints all the positive numbers in the sequence N, N-2, N-4, N-6, N-8, ... ."
                }
            },
            {
                "item": "664e283a91363872f0ba33d7",
                "type": "challenge",
                "details": {
                    "name": "Printing A Right Triangle Star Pattern",
                    "description": "A Right triangle star pattern contains N asterisks in N-th row. Construct a program that receives the number of rows in the right triangle star pattern and prints that triangle. For example, when the number of rows in the right triangle star pattern is 5, the program prints the following output:\\n*\\n**\\n***\\n****\\n*****"
                }
            },
            {
                "item": "664e283c91363872f0ba33d9",
                "type": "challenge",
                "details": {
                    "name": "Printing A Sequence of Repeated Numbers ",
                    "description": "Construct a program that receives an integer N from the user and prints a sequence of space-separated numbers from 1 to N such that each number in the sequence is repeated 5 times. For example, if N is 6, the program will print the following sequence:\\n11111 22222 33333 44444 55555 66666"
                }
            },
            {
                "item": "664e283f91363872f0ba33db",
                "type": "challenge",
                "details": {
                    "name": "Printing Sum of Integers from 1 to i, Where i Ranges from 1 to N",
                    "description": "Construct a program that receives an integer N and then prints the sum of integers from 1 to i, where i ranges from 1 to N. More specifically, the following sums will be printed:\\n1\\n1+2\\n1+2+3\\n...\\n1+2+3+...+N"
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e274891363872f0ba33c5",
        "name": "py_check_age",
        "items": [
            {
                "item": "664e273d91363872f0ba33c1",
                "type": "example",
                "details": {
                    "name": "Determining Whether One is a Teenager (Case 1) ",
                    "description": "Construct a program that receives a string that has the user name and age separated by a colon, and prints whether the user is a teenager. Make sure that the program handles all possible exceptions."
                }
            },
            {
                "item": "664e274591363872f0ba33c3",
                "type": "challenge",
                "details": {
                    "name": "Determining Whether One is a Teenager (Case 2) ",
                    "description": "Construct a program that asks the user to enter a string that has the user name and age separated by a colon, and prints whether the user is a teenager. Make sure that the program handles all possible exceptions. The program must ask the user for an input until the user enters a string that could be processed without any exception."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e272e91363872f0ba33bd",
        "name": "strings.charAt",
        "items": [
            {
                "item": "664e271591363872f0ba33b9",
                "type": "example",
                "details": {
                    "name": "Accessing String Characters (Case 1)",
                    "description": "Construct a program that prints the 1st, 9th, and the last character of the string \"String Example!\"."
                }
            },
            {
                "item": "664e272091363872f0ba33bb",
                "type": "challenge",
                "details": {
                    "name": "Accessing String Characters (Case 2)",
                    "description": "Construct a program that prints the 7th, 11th, and 14th character of the string \"Second Example!\"."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e270491363872f0ba33b4",
        "name": "py_digits",
        "items": [
            {
                "item": "664e26ed91363872f0ba33ae",
                "type": "example",
                "details": {
                    "name": "Printing Digits of an Integer from Right to Left",
                    "description": "Construct a program that prints the digits of an integer from right to left."
                }
            },
            {
                "item": "664e26f191363872f0ba33b0",
                "type": "challenge",
                "details": {
                    "name": "The Digit Sum of an Integer",
                    "description": "Construct a program that calculates the sum of the digits of an integer."
                }
            },
            {
                "item": "664e270191363872f0ba33b2",
                "type": "challenge",
                "details": {
                    "name": "Reversing the Digits of an Integer",
                    "description": "Construct a program that reverses the digits of an integer mathematically."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e26e991363872f0ba33ab",
        "name": "csedpad.16.Methods.no_topic",
        "items": [
            {
                "item": "664e26e391363872f0ba33a9",
                "type": "example",
                "details": {
                    "name": "csedpad.16.Methods.no_topic",
                    "description": "You are given a side of a cube. By using methods in Java, you have to calculate the volume of the cube."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e26df91363872f0ba33a6",
        "name": "csedpad.15.ArrayLists.arraylist",
        "items": [
            {
                "item": "664e26d991363872f0ba33a4",
                "type": "example",
                "details": {
                    "name": "csedpad.15.ArrayLists.arraylist",
                    "description": "For the online order list, this program determines if Seller adds gifts or alcohol risk notes. If the ordered list contains alcohol, the seller adds alcohol risk notes. Otherwise, every order is shipped with gifts of chocolate and peanuts."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e26d791363872f0ba33a1",
        "name": "csedpad.19.ExceptionHandling.exceptionhandling",
        "items": [
            {
                "item": "664e26d591363872f0ba339f",
                "type": "example",
                "details": {
                    "name": "csedpad.19.ExceptionHandling.exceptionhandling",
                    "description": "Your bank account balance suddenly becomes zero and you are trying to find out what proportion of the current balance"
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e26d191363872f0ba339a",
        "name": "csedpad.10.DoWhile.do-whileloops_1",
        "items": [
            {
                "item": "664e26c791363872f0ba3394",
                "type": "example",
                "details": {
                    "name": "csedpad.10.DoWhile.do-whileloops_1",
                    "description": "Repeatedly prompt the user for a number between 0 and 9 until the user enters -1. Each time the user enters a number (other than -1) display the subtotal of the numbers entered so far. When the user enters -1, display the grand total of all the numbers entered."
                }
            },
            {
                "item": "664e26c991363872f0ba3396",
                "type": "example",
                "details": {
                    "name": "csedpad.10.DoWhile.do-whileloops_1",
                    "description": "The world's tiniest command-line calculator. Repeatedly prompt the user for a command (add, sub, or exit). The add command increments an accumulator by 1. The sub command decrements the accumulator by 1. The exit command terminates the program. The state of the accumulator is printed whenever its value is updated."
                }
            },
            {
                "item": "664e26cb91363872f0ba3398",
                "type": "example",
                "details": {
                    "name": "csedpad.10.DoWhile.do-whileloops_1",
                    "description": "Given a collection of test scores with values between 0 and 100, find and display the low and high scores on the test."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e26c591363872f0ba3391",
        "name": "csedpad.02.Input.input_arithmeticexpressions",
        "items": [
            {
                "item": "664e26c391363872f0ba338f",
                "type": "example",
                "details": {
                    "name": "Seconds to Minutes Conversion",
                    "description": "Construct a program that calculates the minutes and remaining seconds from the user input for seconds and prints to the console. For example, 500 seconds contains 8 minutes and 20 seconds."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e25e491363872f0ba338b",
        "name": "csedpad.21.Sorting.no_topic_1",
        "items": [
            {
                "item": "664e25d891363872f0ba3387",
                "type": "example",
                "details": {
                    "name": "csedpad.21.Sorting.no_topic_1",
                    "description": "Given a list of unsorted game cards, sort them in ascending order using the quick sort algorithm."
                }
            },
            {
                "item": "664e25de91363872f0ba3389",
                "type": "example",
                "details": {
                    "name": "csedpad.21.Sorting.no_topic_1",
                    "description": "Sort a given unsorted array using bubble sort in ascending order."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e25d691363872f0ba3383",
        "name": "py_concat_char_two_str",
        "items": [
            {
                "item": "664e25d391363872f0ba337f",
                "type": "example",
                "details": {
                    "name": "Concatenating Characters of Two Strings (Case 1)",
                    "description": "Construct a program that has a function that receives two strings and returns a string formed from the given strings such that the first character of each string is omitted.\\nFor example, the new string that will be formed from the strings 'abc' and 'xyz' is 'bcyz'.\\nAssume that both strings have at least one character."
                }
            },
            {
                "item": "664e25d491363872f0ba3381",
                "type": "challenge",
                "details": {
                    "name": "Concatenating Characters of Two Strings (Case 2)",
                    "description": "Construct a program that has a function that receives two strings and returns a string formed from the given strings separated by a space character such that the first two characters of the given strings are swapped.\\nFor example, the new string that will be formed from the strings 'abc' and 'xyz' is 'xyc abz'.\\nAssume that both strings have at least two characters."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e25cd91363872f0ba337a",
        "name": "py_search_list",
        "items": [
            {
                "item": "664e25c591363872f0ba3374",
                "type": "example",
                "details": {
                    "name": "Printing Common Elements in Two Lists",
                    "description": "Construct a program that has a function that receives two lists and prints the values in the 2nd list that exist in the 1st list."
                }
            },
            {
                "item": "664e25c791363872f0ba3376",
                "type": "challenge",
                "details": {
                    "name": "Printing the Total Number of Times Elements of One List Appear in Another List",
                    "description": "Construct a program that has a function that receives two lists and prints the total number of times the elements in the 2nd list appear in the 1st list. For example, if the 1st list is [1, 2, 3, 3, 4, 4, 5, 6] and the 2nd list is [3, 4, 5, 6, 7], then the total number of times that the elements in the 2nd list appear in the 1st list is 6.\\nNote that we need to count matches for all values in the 2nd list (including duplicate values, if any)."
                }
            },
            {
                "item": "664e25cb91363872f0ba3378",
                "type": "challenge",
                "details": {
                    "name": "Creating a List that Contains the Numbers of Times Each Element of One List Appears in Another List",
                    "description": "Construct a program that has a function that receives two lists and creates a list that contains the number of times each element in the 2nd list appears in the 1st list. For example, if the 1st list is [1, 2, 3, 3, 4, 4, 5, 6] and the 2nd list is [3, 4, 5, 6, 7], then the list that contains the number of times each element in the 2nd list appears in the 1st list is [2, 2, 1, 1, 0].\\nAssume that all elements in the 2nd list are unique."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e25c391363872f0ba3371",
        "name": "csedpad.09.WhileLoops.whileloops",
        "items": [
            {
                "item": "664e25c191363872f0ba336f",
                "type": "example",
                "details": {
                    "name": "csedpad.09.WhileLoops.whileloops",
                    "description": "Guess the number."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e25a991363872f0ba336b",
        "name": "while_loops.divisor",
        "items": [
            {
                "item": "664e258491363872f0ba3367",
                "type": "example",
                "details": {
                    "name": "Finding the Smallest Divisor of a Positive Number",
                    "description": "Construct a program that finds the smallest divisor (other than 1) of a positive number. For example, the smallest divisor of 4 is 2."
                }
            },
            {
                "item": "664e259291363872f0ba3369",
                "type": "challenge",
                "details": {
                    "name": "Finding the Largest Divisor of a Positive Number",
                    "description": "Construct a program that finds the largest divisor of a positive number, excluding the number itself. For example, the largest divisor of 24 is 12."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e258091363872f0ba3362",
        "name": "py_list2d_basic",
        "items": [
            {
                "item": "664e257991363872f0ba335c",
                "type": "example",
                "details": {
                    "name": "Updating Two-Dimensional List (Case 1)",
                    "description": "Construct a program that initializes a 3x4 two-dimensional matrix that has the numbers 1 through 12 for entries, updates the last row to a list filled with 5s, then sets the left-most element in the middle row of the matrix to be 20, and finally prints the matrix."
                }
            },
            {
                "item": "664e257c91363872f0ba335e",
                "type": "challenge",
                "details": {
                    "name": "Updating Two-Dimensional List (Case 2)",
                    "description": "Construct a program that initializes a 3x3 two-dimensional matrix that has the numbers 1 through 9 for entries, updates the middle row to a list filled with 1s, then sets the top-right element of the matrix to be 10, and finally prints the matrix."
                }
            },
            {
                "item": "664e257e91363872f0ba3360",
                "type": "challenge",
                "details": {
                    "name": "Updating Two-Dimensional List (Case 3)",
                    "description": "Construct a program that initializes a 2x4 two-dimensional matrix that has multiples of 10 from 10 to 80 for entries, updates the last row to a list holding values 1,3,5,7, then sets the second element of the first row to be 8, and finally prints the matrix."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e257791363872f0ba3359",
        "name": "csedpad.22.Searching.searching(binarysearch)_1",
        "items": [
            {
                "item": "664e257591363872f0ba3357",
                "type": "example",
                "details": {
                    "name": "csedpad.22.Searching.searching(binarysearch)_1",
                    "description": "This program uses the binary search algorithm to search the index, where \"index will be the rank of prizes you get if the users lottery number is present in the array\". If the index is \"0\", then the rank is \"0 + 1 = 1\", so being 1st ont the rank you get the highest prize."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e256f91363872f0ba3353",
        "name": "csedpad.16.Methods.no_topic_1",
        "items": [
            {
                "item": "664e256391363872f0ba334f",
                "type": "example",
                "details": {
                    "name": "csedpad.16.Methods.no_topic_1",
                    "description": "Calculate the area of a circle given its radius."
                }
            },
            {
                "item": "664e256991363872f0ba3351",
                "type": "example",
                "details": {
                    "name": "csedpad.16.Methods.no_topic_1",
                    "description": "The program will create a method that will show some information about a faculty on a campus. The program will declare a method that will print those information when invoked by a class object.The program will create object of the class, use that object to store data in the class variables declared, and call the method to show the faculty information by printing it."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e256191363872f0ba334b",
        "name": "py_functions_multiple_parameters",
        "items": [
            {
                "item": "664e255e91363872f0ba3347",
                "type": "example",
                "details": {
                    "name": "Multiple Parameters",
                    "description": "Construct a program that calculates the current savings after getting paid and the total expense."
                }
            },
            {
                "item": "664e255f91363872f0ba3349",
                "type": "challenge",
                "details": {
                    "name": "Multiple Parameters",
                    "description": "Construct a program that calculates the pay and current savings."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e255b91363872f0ba3343",
        "name": "arithmetic.pythagorean_theorem",
        "items": [
            {
                "item": "664e255691363872f0ba333f",
                "type": "example",
                "details": {
                    "name": "Pythagorean Theorem (Case 1)",
                    "description": "Construct a program that accepts two input values from the user, one for each side of a right-angle triangle. The program uses the Pythagorean theorem (c^2 = a^2 + b^2) to calculate the length of the triangle's hypotenuse."
                }
            },
            {
                "item": "664e255991363872f0ba3341",
                "type": "challenge",
                "details": {
                    "name": "Pythagorean Theorem (Case 2)",
                    "description": "Suppose that the user provides two input values for a right-angle triangle. The first input is for the length of an adjacent side in the triangle and the second input is for the hypotenuse of that triangle. The program calculates the second adjacent side of the triangle using these two input values. Use the Pythagorean theorem (c^2 = a^2 + b^2) to find the length of the second adjacent side."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e250f91363872f0ba3338",
        "name": "for_loops.j_for_one",
        "items": [
            {
                "item": "664e24f291363872f0ba3334",
                "type": "example",
                "details": {
                    "name": "Printing Consecutive Numbers Starting from Zero (Case 1) ",
                    "description": "Construct a program that prints a sequence of numbers from 0 (inclusive) to 10 (exclusive)."
                }
            },
            {
                "item": "664e250191363872f0ba3336",
                "type": "challenge",
                "details": {
                    "name": "Printing Consecutive Numbers Starting from Zero (Case 2) ",
                    "description": "Construct a program that prints a sequence of numbers from 0 (inclusive) to 6 (exclusive)."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e24f091363872f0ba3330",
        "name": "py_vending_machine",
        "items": [
            {
                "item": "664e24ec91363872f0ba332c",
                "type": "example",
                "details": {
                    "name": "Vending Machine With Dollars and Quarters",
                    "description": "Suppose we have a vending machine that gives change. A customer selects an item for purchase and inserts a bill into the vending machine. The vending machine dispenses the purchased item and gives change. We will assume that all item prices are multiples of 25 cents, and the machine gives all change in dollar and quarters. Construct a program that computes how many dollars and quarters to return to the customer."
                }
            },
            {
                "item": "664e24ee91363872f0ba332e",
                "type": "challenge",
                "details": {
                    "name": "Vending Machine With Quarters, Dimes, and Nickels",
                    "description": "Suppose we have a vending machine that gives change. A customer selects an item for purchase and inserts a bill into the vending machine. The vending machine dispenses the purchased item and gives change. We will assume that all item prices are multiples of 5 cents, and the machine gives all change in quarters, dimes, and nickels. Construct a program that computes how many quarters, dimes, and nickels to return to the customer."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e24ea91363872f0ba3328",
        "name": "booleans.phone_age",
        "items": [
            {
                "item": "664e24e591363872f0ba3324",
                "type": "example",
                "details": {
                    "name": "Determining When to Buy a New Phone (Case 1)",
                    "description": "Construct a program that determines whether it is time to buy a new phone based on the inputs that it receives from the user. A new phone should be bought if the phone breaks or the phone is at least 3 years old."
                }
            },
            {
                "item": "664e24e791363872f0ba3326",
                "type": "challenge",
                "details": {
                    "name": "Determining When to Buy a New Phone (Case 2)",
                    "description": "Construct a program that determines whether it is time to buy a new phone based on the inputs that it receives from the user. A new phone should be bought in either of the following cases:\\nthe phone breaks\\nthe screen has a problem\\nthe phone has the random shutdown problem"
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e24ba91363872f0ba331f",
        "name": "py_soda_survey",
        "items": [
            {
                "item": "664e248491363872f0ba3318",
                "type": "example",
                "details": {
                    "name": "Determining the Maximum Rating for Each Soda in The Survey",
                    "description": "Suppose a soda manufacturer held a taste test for four new flavors to determine if people liked them. The manufacturer got 10 people to try each new flavor and give it a score from 1 to 5, where 1 equals poor and 5 equals excellent. The results of that survey is stored in a matrix. Each row of the matrix holds the responses that all testers gave for one particular soda flavor, and each column holds the responses of one person for all sodas.\\nConstruct a program that determines the maximum rating that each of the four new flavors of soda received."
                }
            },
            {
                "item": "664e248d91363872f0ba331a",
                "type": "challenge",
                "details": {
                    "name": "Determining the Average Rating for Each Soda in The Survey",
                    "description": "Suppose a soda manufacturer held a taste test for four new flavors to determine if people liked them. The manufacturer got 10 people to try each new flavor and give it a score from 1 to 5, where 1 equals poor and 5 equals excellent. The results of that survey is stored in a matrix. Each row of the matrix holds the responses that all testers gave for one particular soda flavor, and each column holds the responses of one person for all sodas.\\nConstruct a program that determines the average ratings that respondents provided to four new flavors of soda."
                }
            },
            {
                "item": "664e24b791363872f0ba331c",
                "type": "challenge",
                "details": {
                    "name": "Determining the Average Ratings of each Respondent and Average Ratings Given to Each Soda in the Survey",
                    "description": "Suppose a soda manufacturer held a taste test for four new flavors to determine if people liked them. The manufacturer got 10 people to try each new flavor and give it a score from 1 to 5, where 1 equals poor and 5 equals excellent. The results of that survey is stored in a matrix. Each row of the matrix holds the responses that all testers gave for one particular soda flavor, and each column holds the responses of one person for all sodas.\\nConstruct a program that determines the average ratings that respondents provided to four new flavors of soda as well as the average ratings of each respondent."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e246091363872f0ba3313",
        "name": "arrays.j_search_array",
        "items": [
            {
                "item": "664e242a91363872f0ba330d",
                "type": "example",
                "details": {
                    "name": "Printing Common Elements in Two Arrays",
                    "description": "Construct a program that has a method that receives two arrays and prints the values in the 2nd array that exist in the 1st array."
                }
            },
            {
                "item": "664e243791363872f0ba330f",
                "type": "challenge",
                "details": {
                    "name": "Printing the Total Number of Times Elements of One Array Appear in Another Array",
                    "description": "Construct a program that has a method that receives two arrays and prints the total number of times the elements in the 2nd array appear in the 1st array. For example, if the 1st array is {1, 2, 3, 3, 4, 4, 5, 6} and the 2nd array is {3, 4, 5, 6, 7}, then the total number of times that the elements in the 2nd array appear in the 1st array is 6.\\nNote that we need to count matches for all values in the 2nd array (including duplicate values, if any)."
                }
            },
            {
                "item": "664e245791363872f0ba3311",
                "type": "challenge",
                "details": {
                    "name": "Creating an array that Contains the Numbers of Times Each Element of One Array Appears in Another Array",
                    "description": "Construct a program that has a function that receives two arrays and creates an array that contains the number of times each element in the 2nd array appears in the 1st array. For example, if the 1st array is {1, 2, 3, 3, 4, 4, 5, 6} and the 2nd array is {3, 4, 5, 6, 7}, then the array that contains the number of times each element in the 2nd array appears in the 1st array is {2, 2, 1, 1, 0}.\\nAssume that all elements in the 2nd array are unique."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e242891363872f0ba3309",
        "name": "py_double_linked_list",
        "items": [
            {
                "item": "664e242591363872f0ba3305",
                "type": "example",
                "details": {
                    "name": "Doubly Linked List",
                    "description": "Create the necessary classes for a Doubly Linked List, containing the method insert_at_start(data) to add a new item to the beginning of the linked list, insert_at_end(data) to add a new item to the end of the linked list, delete_at_start() to delete the first item from the link, and an __str__ method to print out the doubly linked list. Test the doubly linked list after all classes and methods are created."
                }
            },
            {
                "item": "664e242791363872f0ba3307",
                "type": "challenge",
                "details": {
                    "name": "Doubly Linked List",
                    "description": "Create the necessary classes for a Doubly Linked List, containing the method insert_at_start(data) to add a new item to the beginning of the linked list, insert_at_end(data) to add a new item to the end of the linked list, delete_at_start() to delete the first item from the link, and an __str__ method to print out the doubly linked list. Test the doubly linked list after all classes and methods are created."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e242391363872f0ba3302",
        "name": "csedpad.01.preliminary_topics.preliminarytopics",
        "items": [
            {
                "item": "664e242191363872f0ba3300",
                "type": "example",
                "details": {
                    "name": "csedpad.01.preliminary_topics.preliminarytopics",
                    "description": "This program cacluates the area of circle."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e241c91363872f0ba32fc",
        "name": "py_search_binary_search",
        "items": [
            {
                "item": "664e241491363872f0ba32f8",
                "type": "example",
                "details": {
                    "name": "Binary search",
                    "description": "Binary Search operates by dividing an array in half, and then determining whether or not the target value would be in the larger or smaller half. Then, this process repeats by dividing whichever half must contain the target in half again, over and over until the target is found.\nConstruct a function that performs binary search on a given array and returns the index of the target value if it is found in the array. Assume that the target will be in the array (in other words, do not handle the case where the target does not exist in the array)."
                }
            },
            {
                "item": "664e241591363872f0ba32fa",
                "type": "challenge",
                "details": {
                    "name": "Binary search",
                    "description": "Binary Search operates by dividing an array in half, and then determining whether or not the target value would be in the larger or smaller half. Then, this process repeats by dividing whichever half must contain the target in half again, over and over until the target is found.\nConstruct a function that performs binary search on a given array and returns the index of the target value if it is found, and -1 if it is not."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e241291363872f0ba32f4",
        "name": "py_time_conversion",
        "items": [
            {
                "item": "664e23ff91363872f0ba32ee",
                "type": "example",
                "details": {
                    "name": "Seconds to Minutes Conversion",
                    "description": "Construct a program that obtains minutes and remaining seconds from the input amount of time in seconds. For example, 500 seconds contains 8 minutes and 20 seconds."
                }
            },
            {
                "item": "664e240191363872f0ba32f0",
                "type": "challenge",
                "details": {
                    "name": "Converting Milliseconds to Hours, Minutes, and Seconds",
                    "description": "Construct a program that obtains hours, minutes, and seconds from an amount of time in milliseconds."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e23fd91363872f0ba32ea",
        "name": "py_pythagorean_theorem",
        "items": [
            {
                "item": "664e23fa91363872f0ba32e6",
                "type": "example",
                "details": {
                    "name": "Pythagorean Theorem (Case 1)",
                    "description": "Construct a program that accepts two input values from the user, one for each side of a right-angle triangle. The program uses the Pythagorean theorem (c^2 = a^2 + b^2) to calculate the length of the triangle's hypotenuse."
                }
            },
            {
                "item": "664e23fc91363872f0ba32e8",
                "type": "challenge",
                "details": {
                    "name": "Pythagorean Theorem (Case 2)",
                    "description": "Suppose that the user provides two input values for a right-angle triangle. The first input is for the length of an adjacent side in the triangle and the second input is for the hypotenuse of that triangle. The program calculates the second adjacent side of the triangle using these two input values. Use the Pythagorean theorem (c^2 = a^2 + b^2) to find the length of the second adjacent side."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664e23f991363872f0ba32e3",
        "name": "csedpad.input.inputtype",
        "items": [
            {
                "item": "664e23f691363872f0ba32e1",
                "type": "example",
                "details": {
                    "name": "csedpad.input.inputtype",
                    "description": "This program takes user inputs where there are different input types, as it collects details of the employee."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "664a4a863cdecd3c7d4a2a83",
        "name": "Passing reference variables as parameters in Java",
        "items": [
            {
                "item": "664a409a3cdecd3c7d4a2a5b",
                "type": "example",
                "details": {
                    "name": "Example: growing dogs",
                    "description": "Passing reference variables as parameters to a method call in Java."
                }
            },
            {
                "item": "664a45173cdecd3c7d4a2a61",
                "type": "challenge",
                "details": {
                    "name": "Challenge: growing a dog",
                    "description": "Using static methods to create a dog of a specified size. \n\nPassing reference variables as parameters to method calls.\n\nGiven a Dog of size 5, make its size 1, using any of the two methods: reset() and grow()."
                }
            }
        ],
        "author": {
            "fullname": "Marina Barsky",
            "email": "mbarsky@pitt.edu"
        }
    },
    {
        "id": "65ff4103f1aa1b9c009c184f",
        "name": "Histogram Challenge",
        "items": [
            {
                "item": "65fc6168f1aa1b9c009c1714",
                "type": "challenge",
                "details": {
                    "name": "Histogram",
                    "description": "Write a python program that create a histogram of the words count in a text."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "65ff4075f1aa1b9c009c1833",
        "name": "Histogram Example",
        "items": [
            {
                "item": "65fc6168f1aa1b9c009c1714",
                "type": "example",
                "details": {
                    "name": "Histogram",
                    "description": "Write a python program that create a histogram of the words count in a text."
                }
            }
        ],
        "author": {
            "fullname": "Mohammad Hassany",
            "email": "moh70@pitt.edu"
        }
    },
    {
        "id": "65d6557e704b52554dcda1e1",
        "name": "Dictionary",
        "items": [
            {
                "item": "65d650a6704b52554dcda1d3",
                "type": "example",
                "details": {
                    "name": "Number of vowels",
                    "description": "Write a program that counts how many vowels there are in a string (each one separately)."
                }
            },
            {
                "item": "65d6514c704b52554dcda1d9",
                "type": "example",
                "details": {
                    "name": "My books",
                    "description": "The book is described by identifier, title, authors, publisher, unit price and year of publication. There cannot be two books with the same identifier. A single book is represented by a dictionary, where items from the book's description correspond to keys from the dictionary. The list of books is placed in the list of dictionaries. Write a program that allows you to add a new book and view all books from the list. Book printing should be formatted as shown below:\n\nnumber   title              author                 publisher             price               year              \n-----------------------------------------------------------------------------------------\n1             Hobbit          J.R.R.Tolkien         Penguin              25                   2012                \n2             Martian        Andy Weir            Euro Book           18                   2014   \n\n\nImplement functions that save the book dictionary list to a file and read from the file.\n"
                }
            }
        ],
        "author": {
            "fullname": "Aleksandra Klasnja Milicevic",
            "email": "akm@dmi.uns.ac.rs"
        }
    },
    {
        "id": "65d64c56704b52554dcda1ba",
        "name": "Generators",
        "items": [
            {
                "item": "65d64b38704b52554dcda1a4",
                "type": "example",
                "details": {
                    "name": "Fibonacci generator",
                    "description": "Generate Fibonacci numbers less than 1000."
                }
            },
            {
                "item": "65d64be6704b52554dcda1ae",
                "type": "example",
                "details": {
                    "name": "Generating reversed string"
                }
            }
        ],
        "author": {
            "fullname": "Aleksandra Klasnja Milicevic",
            "email": "akm@dmi.uns.ac.rs"
        }
    },
    {
        "id": "65d631546bb3b6be423342e3",
        "name": "Files",
        "items": [
            {
                "item": "65d62b6b6bb3b6be423342c9",
                "type": "example",
                "details": {
                    "name": "Writing to file",
                    "description": "Write a program that will enter the first and last name of the student, as well as the average grade, into the file. Grades are entered in the list, the average is calculated, and then it is written into the file.\n"
                }
            },
            {
                "item": "65d3b58c959f49e7ee8ff0c0",
                "type": "example",
                "details": {
                    "name": "Bills statistics",
                    "description": "Write a program that combines the content of two files and saves it to a third file. The first file contains the usernames and passwords of the sellers, and the second file contains the price ranges of the items sold by the sellers. The first line in the file with usernames and passwords corresponds to the first line in the file with accounts, the second line in the file with user names and passwords corresponds to the second line in the file with accounts, etc. Each row of the third file should contain the seller's username, the total price of the goods they sold, and the average price of the item they sold.\n\nusers.txt\nana|xyz\npeter|abc\nmike|asd\n\nbills.txt\n100|200|150|150|300|100\n50|100|100|50\n300|400|200|100|400\n\nThe generated file should be:\nstats.txt\nana|1000.0|166.66666666666666\npeter|300.0|75.0\nmike|1400.0|280.0\n"
                }
            }
        ],
        "author": {
            "fullname": "Aleksandra Klasnja Milicevic",
            "email": "akm@dmi.uns.ac.rs"
        }
    },
    {
        "id": "65ce16248a3ea46c42296388",
        "name": "For loop",
        "items": [
            {
                "item": "65ce14528a3ea46c42296378",
                "type": "example",
                "details": {
                    "name": "Array sum calculator",
                    "description": "demonstrates the use of a for loop to calculate the sum of all members of an array of integers."
                }
            },
            {
                "item": "65ce14d18a3ea46c4229637f",
                "type": "challenge",
                "details": {
                    "name": "Maximum value in array",
                    "description": "For loop that finds the maximum value in an array of integers."
                }
            }
        ],
        "author": {
            "fullname": "Boban Vesin",
            "email": "boban.vesin@usn.no"
        }
    },
    {
        "id": "65ce13b78a3ea46c42296371",
        "name": "do while loop",
        "items": [
            {
                "item": "65ce118d8a3ea46c4229635b",
                "type": "example",
                "details": {
                    "name": "Finding zero",
                    "description": "a \"do while\" loop to iterate through an array of random integer numbers, searching for the number 0. When it finds 0, the program prints the location (array index) of the 0. "
                }
            },
            {
                "item": "65ce12de8a3ea46c42296367",
                "type": "challenge",
                "details": {
                    "name": "Factorial calculator"
                }
            }
        ],
        "author": {
            "fullname": "Boban Vesin",
            "email": "boban.vesin@usn.no"
        }
    },
    {
        "id": "65ce10ef8a3ea46c42296350",
        "name": "While loop",
        "items": [
            {
                "item": "65ce0f3e8a3ea46c42296346",
                "type": "example",
                "details": {
                    "name": "Sum of all two-digit even numbers",
                    "description": "This example includes a method calculateSumOfEvenNumbers within a class named EvenNumberSumCalculator. The method iterates through all two-digit numbers, checks if a number is even, and then adds it to a sum if it is. The two-digit numbers range from 10 to 99, inclusive."
                }
            }
        ],
        "author": {
            "fullname": "Boban Vesin",
            "email": "boban.vesin@usn.no"
        }
    },
    {
        "id": "65cdf8218a3ea46c42296261",
        "name": "Plain Old Java Object",
        "items": [
            {
                "item": "65cde6cb8a3ea46c4229620c",
                "type": "example",
                "details": {
                    "name": "Use of Plain Old Java Object",
                    "description": "Creates a Java class named Student that represents a student with two properties: name and age. This class demonstrates basic principles of encapsulation in Java."
                }
            },
            {
                "item": "65ce01b98a3ea46c4229629d",
                "type": "challenge",
                "details": {
                    "name": "Plain Old Java Object",
                    "description": "Class named Book that represents a book with two properties: title (a String) and numberOfPages (an int)."
                }
            }
        ],
        "author": {
            "fullname": "Boban Vesin",
            "email": "boban.vesin@usn.no"
        }
    },
    {
        "id": "65a7f4cccc1b848d9005d617",
        "name": "Test",
        "items": [
            {
                "item": "659ebbd4a596b999d21b31d6",
                "type": "example",
                "details": {
                    "name": "Recursive Fibonacci"
                }
            },
            {
                "item": "65a7e180cc1b848d9005d5c0",
                "type": "example",
                "details": {
                    "name": "Enhanced For Loop in ArrayList"
                }
            }
        ],
        "author": {
            "fullname": "Jordan Ariel Barria Pineda",
            "email": "jab464@pitt.edu"
        }
    },
    {
        "id": "65a2e824873c41a5df941483",
        "name": "Basic Python examples",
        "items": [
            {
                "item": "65a2dfa3873c41a5df94145e",
                "type": "example",
                "details": {
                    "name": "Farenheit to Celsius converter",
                    "description": "Conditional execution with try and except"
                }
            },
            {
                "item": "65a2e1e1873c41a5df94146b",
                "type": "example",
                "details": {
                    "name": "Largest value in list",
                    "description": "Maximum and minimum loops"
                }
            },
            {
                "item": "65a2e477873c41a5df941475",
                "type": "example",
                "details": {
                    "name": "Counting letter repetition",
                    "description": "Looping and counting"
                }
            },
            {
                "item": "65a2e63d873c41a5df94147b",
                "type": "example",
                "details": {
                    "name": "Average of input numbers",
                    "description": "Lists and functions"
                }
            }
        ],
        "author": {
            "fullname": "Rafaella Sampaio de Alencar",
            "email": "rafaellasalencar@gmail.com"
        }
    },
    {
        "id": "659f833ca596b999d21b3359",
        "name": "PFE-Textbook",
        "items": [
            {
                "item": "659f7cf4a596b999d21b3321",
                "type": "example",
                "details": {
                    "name": "string-comparison"
                }
            },
            {
                "item": "659f8173a596b999d21b334f",
                "type": "challenge",
                "details": {
                    "name": "infinite-loop"
                }
            },
            {
                "item": "659f8402a596b999d21b3376",
                "type": "example",
                "details": {
                    "name": "print-lyrics"
                }
            },
            {
                "item": "659f8506a596b999d21b3392",
                "type": "challenge",
                "details": {
                    "name": "parsing-lines-search"
                }
            }
        ],
        "author": {
            "fullname": "Arun Balajiee Lekshmi Narayanan",
            "email": "arl122@pitt.edu"
        }
    },
    {
        "id": "659db55e69288ce31cde43ff",
        "name": "Cat Name Program",
        "items": [
            {
                "item": "659db43169288ce31cde43f0",
                "type": "example",
                "details": {
                    "name": "Cat Name Program",
                    "description": "This is a short program that stores the names of cats in a list"
                }
            }
        ],
        "author": {
            "fullname": "Matthew Burton",
            "email": "mcburton@pitt.edu"
        }
    }
]